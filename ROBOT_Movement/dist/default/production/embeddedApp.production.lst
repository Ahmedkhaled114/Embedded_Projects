

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Apr 03 18:11:49 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F46K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    32  0000                     
    33                           ; Version 2.20
    34                           ; Generated 05/05/2020 GMT
    35                           ; 
    36                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F46K20 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataCOMRAM
    69  00F754                     __pidataCOMRAM:
    70                           	callstack 0
    71                           
    72                           ;initializer for _port_register
    73  00F754  80                 	db	128
    74  00F755  0F                 	db	15
    75  00F756  81                 	db	129
    76  00F757  0F                 	db	15
    77  00F758  82                 	db	130
    78  00F759  0F                 	db	15
    79  00F75A  83                 	db	131
    80  00F75B  0F                 	db	15
    81  00F75C  84                 	db	132
    82  00F75D  0F                 	db	15
    83                           
    84                           ;initializer for _lat_register
    85  00F75E  89                 	db	137
    86  00F75F  0F                 	db	15
    87  00F760  8A                 	db	138
    88  00F761  0F                 	db	15
    89  00F762  8B                 	db	139
    90  00F763  0F                 	db	15
    91  00F764  8C                 	db	140
    92  00F765  0F                 	db	15
    93  00F766  8D                 	db	141
    94  00F767  0F                 	db	15
    95                           
    96                           ;initializer for _tris_register
    97  00F768  92                 	db	146
    98  00F769  0F                 	db	15
    99  00F76A  93                 	db	147
   100  00F76B  0F                 	db	15
   101  00F76C  94                 	db	148
   102  00F76D  0F                 	db	15
   103  00F76E  95                 	db	149
   104  00F76F  0F                 	db	15
   105  00F770  96                 	db	150
   106  00F771  0F                 	db	15
   107                           
   108                           ;initializer for _dc_motor_4
   109  00F772  E2                 	db	226
   110  00F773  F2                 	db	242
   111                           
   112                           ;initializer for _dc_motor_3
   113  00F774  C2                 	db	194
   114  00F775  D2                 	db	210
   115                           
   116                           ;initializer for _dc_motor_2
   117  00F776  A2                 	db	162
   118  00F777  B2                 	db	178
   119                           
   120                           ;initializer for _dc_motor_1
   121  00F778  82                 	db	130
   122  00F779  92                 	db	146
   123                           
   124                           ;initializer for _btn_left
   125  00F77A  33                 	db	51
   126                           
   127                           ;initializer for _btn_right
   128  00F77B  23                 	db	35
   129                           
   130                           ;initializer for _btn_backward
   131  00F77C  13                 	db	19
   132                           
   133                           ;initializer for _btn_forward
   134  00F77D  03                 	db	3
   135  0000                     _PORTE	set	3972
   136  0000                     _PORTD	set	3971
   137  0000                     _PORTC	set	3970
   138  0000                     _PORTB	set	3969
   139  0000                     _PORTA	set	3968
   140  0000                     _LATE	set	3981
   141  0000                     _LATD	set	3980
   142  0000                     _LATC	set	3979
   143  0000                     _LATB	set	3978
   144  0000                     _LATA	set	3977
   145  0000                     _TRISE	set	3990
   146  0000                     _TRISD	set	3989
   147  0000                     _TRISC	set	3988
   148  0000                     _TRISB	set	3987
   149  0000                     _TRISA	set	3986
   150                           
   151                           ; #config settings
   152                           
   153                           	psect	cinit
   154  00F878                     __pcinit:
   155                           	callstack 0
   156  00F878                     start_initialization:
   157                           	callstack 0
   158  00F878                     __initialization:
   159                           	callstack 0
   160                           
   161                           ; Initialize objects allocated to COMRAM (42 bytes)
   162                           ; load TBLPTR registers with __pidataCOMRAM
   163  00F878  0E54               	movlw	low __pidataCOMRAM
   164  00F87A  6EF6               	movwf	tblptrl,c
   165  00F87C  0EF7               	movlw	high __pidataCOMRAM
   166  00F87E  6EF7               	movwf	tblptrh,c
   167  00F880  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   168  00F882  6EF8               	movwf	tblptru,c
   169  00F884  EE00  F001         	lfsr	0,__pdataCOMRAM
   170  00F888  EE10 F02A          	lfsr	1,42
   171  00F88C                     copy_data0:
   172  00F88C  0009               	tblrd		*+
   173  00F88E  CFF5 FFEE          	movff	tablat,postinc0
   174  00F892  50E5               	movf	postdec1,w,c
   175  00F894  50E1               	movf	fsr1l,w,c
   176  00F896  E1FA               	bnz	copy_data0
   177                           
   178                           ; Clear objects allocated to COMRAM (4 bytes)
   179  00F898  6A3E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   180  00F89A  6A3D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   181  00F89C  6A3C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   182  00F89E  6A3B               	clrf	__pbssCOMRAM& (0+255),c
   183  00F8A0                     end_of_initialization:
   184                           	callstack 0
   185  00F8A0                     __end_of__initialization:
   186                           	callstack 0
   187  00F8A0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   188  00F8A2  6EF8               	movwf	tblptru,c
   189  00F8A4  0100               	movlb	0
   190  00F8A6  EF12  F07F         	goto	_main	;jump to C main() function
   191                           
   192                           	psect	bssCOMRAM
   193  00003B                     __pbssCOMRAM:
   194                           	callstack 0
   195  00003B                     _btn_left_status:
   196                           	callstack 0
   197  00003B                     	ds	1
   198  00003C                     _btn_right_status:
   199                           	callstack 0
   200  00003C                     	ds	1
   201  00003D                     _btn_backward_status:
   202                           	callstack 0
   203  00003D                     	ds	1
   204  00003E                     _btn_forward_status:
   205                           	callstack 0
   206  00003E                     	ds	1
   207                           
   208                           	psect	dataCOMRAM
   209  000001                     __pdataCOMRAM:
   210                           	callstack 0
   211  000001                     _port_register:
   212                           	callstack 0
   213  000001                     	ds	10
   214  00000B                     _lat_register:
   215                           	callstack 0
   216  00000B                     	ds	10
   217  000015                     _tris_register:
   218                           	callstack 0
   219  000015                     	ds	10
   220  00001F                     _dc_motor_4:
   221                           	callstack 0
   222  00001F                     	ds	2
   223  000021                     _dc_motor_3:
   224                           	callstack 0
   225  000021                     	ds	2
   226  000023                     _dc_motor_2:
   227                           	callstack 0
   228  000023                     	ds	2
   229  000025                     _dc_motor_1:
   230                           	callstack 0
   231  000025                     	ds	2
   232  000027                     _btn_left:
   233                           	callstack 0
   234  000027                     	ds	1
   235  000028                     _btn_right:
   236                           	callstack 0
   237  000028                     	ds	1
   238  000029                     _btn_backward:
   239                           	callstack 0
   240  000029                     	ds	1
   241  00002A                     _btn_forward:
   242                           	callstack 0
   243  00002A                     	ds	1
   244                           
   245                           	psect	cstackCOMRAM
   246  00002B                     __pcstackCOMRAM:
   247                           	callstack 0
   248  00002B                     gpio_pin_direction_initialize@pin:
   249                           	callstack 0
   250  00002B                     gpio_pin_write_value@pin:
   251                           	callstack 0
   252  00002B                     gpio_pin_read_value@pin:
   253                           	callstack 0
   254                           
   255                           ; 1 bytes @ 0x0
   256  00002B                     	ds	1
   257  00002C                     gpio_pin_direction_initialize@direction:
   258                           	callstack 0
   259  00002C                     gpio_pin_write_value@logic:
   260                           	callstack 0
   261  00002C                     gpio_pin_read_value@logic:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x1
   265  00002C                     	ds	1
   266  00002D                     ??_gpio_pin_direction_initialize:
   267  00002D                     ??_gpio_pin_write_value:
   268                           
   269                           ; 1 bytes @ 0x2
   270  00002D                     	ds	1
   271  00002E                     ??_gpio_pin_read_value:
   272                           
   273                           ; 1 bytes @ 0x3
   274  00002E                     	ds	5
   275  000033                     gpio_pin_direction_initialize@port:
   276                           	callstack 0
   277  000033                     gpio_pin_write_value@port:
   278                           	callstack 0
   279  000033                     gpio_pin_read_value@port:
   280                           	callstack 0
   281                           
   282                           ; 1 bytes @ 0x8
   283  000033                     	ds	1
   284  000034                     button_initialize@btn:
   285                           	callstack 0
   286  000034                     button_get_status@btn:
   287                           	callstack 0
   288  000034                     relay_initialize@relay:
   289                           	callstack 0
   290  000034                     relay_turn_on@relay:
   291                           	callstack 0
   292  000034                     relay_turn_off@relay:
   293                           	callstack 0
   294                           
   295                           ; 2 bytes @ 0x9
   296  000034                     	ds	2
   297  000036                     ??_relay_initialize:
   298  000036                     ??_relay_turn_on:
   299  000036                     ??_relay_turn_off:
   300  000036                     ??_button_initialize:
   301  000036                     button_get_status@btn_status:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0xB
   305  000036                     	ds	2
   306  000038                     ??_button_get_status:
   307  000038                     dc_motor_initialize@dc_motor:
   308                           	callstack 0
   309  000038                     dc_motor_rotate_right@dc_motor:
   310                           	callstack 0
   311  000038                     dc_motor_rotate_left@dc_motor:
   312                           	callstack 0
   313  000038                     dc_motor_stop@dc_motor:
   314                           	callstack 0
   315                           
   316                           ; 2 bytes @ 0xD
   317  000038                     	ds	2
   318  00003A                     
   319                           ; 1 bytes @ 0xF
   320  00003A                     	ds	1
   321  00003B                     
   322                           ; 1 bytes @ 0x10
   323 ;;
   324 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   325 ;;
   326 ;; *************** function _main *****************
   327 ;; Defined at:
   328 ;;		line 66 in file "application.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;		None
   333 ;; Return value:  Size  Location     Type
   334 ;;                  2  278[None  ] int 
   335 ;; Registers used:
   336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   337 ;; Tracked objects:
   338 ;;		On entry : 0/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   346 ;;Total ram usage:        0 bytes
   347 ;; Hardware stack levels required when called:    4
   348 ;; This function calls:
   349 ;;		_button_get_status
   350 ;;		_button_initialize
   351 ;;		_dc_motor_initialize
   352 ;;		_robot_move_backward
   353 ;;		_robot_move_forward
   354 ;;		_robot_move_stop
   355 ;;		_robot_twist_left
   356 ;;		_robot_twist_right
   357 ;; This function is called by:
   358 ;;		Startup code after reset
   359 ;; This function uses a non-reentrant model
   360 ;;
   361                           
   362                           	psect	text0
   363  00FE24                     __ptext0:
   364                           	callstack 0
   365  00FE24                     _main:
   366                           	callstack 27
   367  00FE24                     
   368                           ;application.c: 68:     dc_motor_initialize(&dc_motor_1);
   369  00FE24  0E25               	movlw	low _dc_motor_1
   370  00FE26  6E38               	movwf	dc_motor_initialize@dc_motor^0,c
   371  00FE28  0E00               	movlw	high _dc_motor_1
   372  00FE2A  6E39               	movwf	(dc_motor_initialize@dc_motor+1)^0,c
   373  00FE2C  EC55  F07C         	call	_dc_motor_initialize	;wreg free
   374                           
   375                           ;application.c: 69:     dc_motor_initialize(&dc_motor_2);
   376  00FE30  0E23               	movlw	low _dc_motor_2
   377  00FE32  6E38               	movwf	dc_motor_initialize@dc_motor^0,c
   378  00FE34  0E00               	movlw	high _dc_motor_2
   379  00FE36  6E39               	movwf	(dc_motor_initialize@dc_motor+1)^0,c
   380  00FE38  EC55  F07C         	call	_dc_motor_initialize	;wreg free
   381                           
   382                           ;application.c: 70:     dc_motor_initialize(&dc_motor_3);
   383  00FE3C  0E21               	movlw	low _dc_motor_3
   384  00FE3E  6E38               	movwf	dc_motor_initialize@dc_motor^0,c
   385  00FE40  0E00               	movlw	high _dc_motor_3
   386  00FE42  6E39               	movwf	(dc_motor_initialize@dc_motor+1)^0,c
   387  00FE44  EC55  F07C         	call	_dc_motor_initialize	;wreg free
   388                           
   389                           ;application.c: 71:     dc_motor_initialize(&dc_motor_4);
   390  00FE48  0E1F               	movlw	low _dc_motor_4
   391  00FE4A  6E38               	movwf	dc_motor_initialize@dc_motor^0,c
   392  00FE4C  0E00               	movlw	high _dc_motor_4
   393  00FE4E  6E39               	movwf	(dc_motor_initialize@dc_motor+1)^0,c
   394  00FE50  EC55  F07C         	call	_dc_motor_initialize	;wreg free
   395                           
   396                           ;application.c: 73:     button_initialize(&btn_forward);
   397  00FE54  0E2A               	movlw	low _btn_forward
   398  00FE56  6E34               	movwf	button_initialize@btn^0,c
   399  00FE58  0E00               	movlw	high _btn_forward
   400  00FE5A  6E35               	movwf	(button_initialize@btn+1)^0,c
   401  00FE5C  ECF5  F07C         	call	_button_initialize	;wreg free
   402                           
   403                           ;application.c: 74:     button_initialize(&btn_backward);
   404  00FE60  0E29               	movlw	low _btn_backward
   405  00FE62  6E34               	movwf	button_initialize@btn^0,c
   406  00FE64  0E00               	movlw	high _btn_backward
   407  00FE66  6E35               	movwf	(button_initialize@btn+1)^0,c
   408  00FE68  ECF5  F07C         	call	_button_initialize	;wreg free
   409                           
   410                           ;application.c: 75:     button_initialize(&btn_right);
   411  00FE6C  0E28               	movlw	low _btn_right
   412  00FE6E  6E34               	movwf	button_initialize@btn^0,c
   413  00FE70  0E00               	movlw	high _btn_right
   414  00FE72  6E35               	movwf	(button_initialize@btn+1)^0,c
   415  00FE74  ECF5  F07C         	call	_button_initialize	;wreg free
   416                           
   417                           ;application.c: 76:     button_initialize(&btn_left);
   418  00FE78  0E27               	movlw	low _btn_left
   419  00FE7A  6E34               	movwf	button_initialize@btn^0,c
   420  00FE7C  0E00               	movlw	high _btn_left
   421  00FE7E  6E35               	movwf	(button_initialize@btn+1)^0,c
   422  00FE80  ECF5  F07C         	call	_button_initialize	;wreg free
   423  00FE84                     l279:
   424                           
   425                           ;application.c: 81:         button_get_status(&btn_forward, &btn_forward_status);
   426  00FE84  0E2A               	movlw	low _btn_forward
   427  00FE86  6E34               	movwf	button_get_status@btn^0,c
   428  00FE88  0E00               	movlw	high _btn_forward
   429  00FE8A  6E35               	movwf	(button_get_status@btn+1)^0,c
   430  00FE8C  0E3E               	movlw	low _btn_forward_status
   431  00FE8E  6E36               	movwf	button_get_status@btn_status^0,c
   432  00FE90  0E00               	movlw	high _btn_forward_status
   433  00FE92  6E37               	movwf	(button_get_status@btn_status+1)^0,c
   434  00FE94  ECFC  F07D         	call	_button_get_status	;wreg free
   435                           
   436                           ;application.c: 82:         button_get_status(&btn_backward, &btn_backward_status);
   437  00FE98  0E29               	movlw	low _btn_backward
   438  00FE9A  6E34               	movwf	button_get_status@btn^0,c
   439  00FE9C  0E00               	movlw	high _btn_backward
   440  00FE9E  6E35               	movwf	(button_get_status@btn+1)^0,c
   441  00FEA0  0E3D               	movlw	low _btn_backward_status
   442  00FEA2  6E36               	movwf	button_get_status@btn_status^0,c
   443  00FEA4  0E00               	movlw	high _btn_backward_status
   444  00FEA6  6E37               	movwf	(button_get_status@btn_status+1)^0,c
   445  00FEA8  ECFC  F07D         	call	_button_get_status	;wreg free
   446                           
   447                           ;application.c: 83:         button_get_status(&btn_right, &btn_right_status);
   448  00FEAC  0E28               	movlw	low _btn_right
   449  00FEAE  6E34               	movwf	button_get_status@btn^0,c
   450  00FEB0  0E00               	movlw	high _btn_right
   451  00FEB2  6E35               	movwf	(button_get_status@btn+1)^0,c
   452  00FEB4  0E3C               	movlw	low _btn_right_status
   453  00FEB6  6E36               	movwf	button_get_status@btn_status^0,c
   454  00FEB8  0E00               	movlw	high _btn_right_status
   455  00FEBA  6E37               	movwf	(button_get_status@btn_status+1)^0,c
   456  00FEBC  ECFC  F07D         	call	_button_get_status	;wreg free
   457                           
   458                           ;application.c: 84:         button_get_status(&btn_left, &btn_left_status);
   459  00FEC0  0E27               	movlw	low _btn_left
   460  00FEC2  6E34               	movwf	button_get_status@btn^0,c
   461  00FEC4  0E00               	movlw	high _btn_left
   462  00FEC6  6E35               	movwf	(button_get_status@btn+1)^0,c
   463  00FEC8  0E3B               	movlw	low _btn_left_status
   464  00FECA  6E36               	movwf	button_get_status@btn_status^0,c
   465  00FECC  0E00               	movlw	high _btn_left_status
   466  00FECE  6E37               	movwf	(button_get_status@btn_status+1)^0,c
   467  00FED0  ECFC  F07D         	call	_button_get_status	;wreg free
   468  00FED4                     
   469                           ;application.c: 86:         if(btn_forward_status == BUTTON_PRESSED && btn_backward_stat
      +                          us == BUTTON_NOT_PRESSED
   470  00FED4  043E               	decf	_btn_forward_status^0,w,c
   471  00FED6  A4D8               	btfss	status,2,c
   472  00FED8  EF70  F07F         	goto	u1061
   473  00FEDC  EF72  F07F         	goto	u1060
   474  00FEE0                     u1061:
   475  00FEE0  EF8E  F07F         	goto	l1723
   476  00FEE4                     u1060:
   477  00FEE4  503D               	movf	_btn_backward_status^0,w,c
   478  00FEE6  A4D8               	btfss	status,2,c
   479  00FEE8  EF78  F07F         	goto	u1071
   480  00FEEC  EF7A  F07F         	goto	u1070
   481  00FEF0                     u1071:
   482  00FEF0  EF8E  F07F         	goto	l1723
   483  00FEF4                     u1070:
   484  00FEF4  503C               	movf	_btn_right_status^0,w,c
   485  00FEF6  A4D8               	btfss	status,2,c
   486  00FEF8  EF80  F07F         	goto	u1081
   487  00FEFC  EF82  F07F         	goto	u1080
   488  00FF00                     u1081:
   489  00FF00  EF8E  F07F         	goto	l1723
   490  00FF04                     u1080:
   491  00FF04  503B               	movf	_btn_left_status^0,w,c
   492  00FF06  A4D8               	btfss	status,2,c
   493  00FF08  EF88  F07F         	goto	u1091
   494  00FF0C  EF8A  F07F         	goto	u1090
   495  00FF10                     u1091:
   496  00FF10  EF8E  F07F         	goto	l1723
   497  00FF14                     u1090:
   498  00FF14                     
   499                           ;application.c: 87:            &&btn_right_status == BUTTON_NOT_PRESSED && btn_left_stat
      +                          us == BUTTON_NOT_PRESSED){;application.c: 88:             robot_move_forward();
   500  00FF14  ECD8  F07B         	call	_robot_move_forward	;wreg free
   501                           
   502                           ;application.c: 89:         }
   503  00FF18  EF42  F07F         	goto	l279
   504  00FF1C                     l1723:
   505  00FF1C  503E               	movf	_btn_forward_status^0,w,c
   506  00FF1E  A4D8               	btfss	status,2,c
   507  00FF20  EF94  F07F         	goto	u1101
   508  00FF24  EF96  F07F         	goto	u1100
   509  00FF28                     u1101:
   510  00FF28  EFB2  F07F         	goto	l1733
   511  00FF2C                     u1100:
   512  00FF2C  043D               	decf	_btn_backward_status^0,w,c
   513  00FF2E  A4D8               	btfss	status,2,c
   514  00FF30  EF9C  F07F         	goto	u1111
   515  00FF34  EF9E  F07F         	goto	u1110
   516  00FF38                     u1111:
   517  00FF38  EFB2  F07F         	goto	l1733
   518  00FF3C                     u1110:
   519  00FF3C  503C               	movf	_btn_right_status^0,w,c
   520  00FF3E  A4D8               	btfss	status,2,c
   521  00FF40  EFA4  F07F         	goto	u1121
   522  00FF44  EFA6  F07F         	goto	u1120
   523  00FF48                     u1121:
   524  00FF48  EFB2  F07F         	goto	l1733
   525  00FF4C                     u1120:
   526  00FF4C  503B               	movf	_btn_left_status^0,w,c
   527  00FF4E  A4D8               	btfss	status,2,c
   528  00FF50  EFAC  F07F         	goto	u1131
   529  00FF54  EFAE  F07F         	goto	u1130
   530  00FF58                     u1131:
   531  00FF58  EFB2  F07F         	goto	l1733
   532  00FF5C                     u1130:
   533  00FF5C                     
   534                           ;application.c: 91:                 &&btn_right_status == BUTTON_NOT_PRESSED && btn_left
      +                          _status == BUTTON_NOT_PRESSED){;application.c: 92:             robot_move_backward();
   535  00FF5C  ECBF  F07B         	call	_robot_move_backward	;wreg free
   536                           
   537                           ;application.c: 93:         }
   538  00FF60  EF42  F07F         	goto	l279
   539  00FF64                     l1733:
   540  00FF64  503E               	movf	_btn_forward_status^0,w,c
   541  00FF66  A4D8               	btfss	status,2,c
   542  00FF68  EFB8  F07F         	goto	u1141
   543  00FF6C  EFBA  F07F         	goto	u1140
   544  00FF70                     u1141:
   545  00FF70  EFD6  F07F         	goto	l1743
   546  00FF74                     u1140:
   547  00FF74  503D               	movf	_btn_backward_status^0,w,c
   548  00FF76  A4D8               	btfss	status,2,c
   549  00FF78  EFC0  F07F         	goto	u1151
   550  00FF7C  EFC2  F07F         	goto	u1150
   551  00FF80                     u1151:
   552  00FF80  EFD6  F07F         	goto	l1743
   553  00FF84                     u1150:
   554  00FF84  043C               	decf	_btn_right_status^0,w,c
   555  00FF86  A4D8               	btfss	status,2,c
   556  00FF88  EFC8  F07F         	goto	u1161
   557  00FF8C  EFCA  F07F         	goto	u1160
   558  00FF90                     u1161:
   559  00FF90  EFD6  F07F         	goto	l1743
   560  00FF94                     u1160:
   561  00FF94  503B               	movf	_btn_left_status^0,w,c
   562  00FF96  A4D8               	btfss	status,2,c
   563  00FF98  EFD0  F07F         	goto	u1171
   564  00FF9C  EFD2  F07F         	goto	u1170
   565  00FFA0                     u1171:
   566  00FFA0  EFD6  F07F         	goto	l1743
   567  00FFA4                     u1170:
   568  00FFA4                     
   569                           ;application.c: 95:            &&btn_right_status == BUTTON_PRESSED && btn_left_status =
      +                          = BUTTON_NOT_PRESSED){;application.c: 96:            robot_twist_right();
   570  00FFA4  EC23  F07C         	call	_robot_twist_right	;wreg free
   571                           
   572                           ;application.c: 97:         }
   573  00FFA8  EF42  F07F         	goto	l279
   574  00FFAC                     l1743:
   575  00FFAC  503E               	movf	_btn_forward_status^0,w,c
   576  00FFAE  A4D8               	btfss	status,2,c
   577  00FFB0  EFDC  F07F         	goto	u1181
   578  00FFB4  EFDE  F07F         	goto	u1180
   579  00FFB8                     u1181:
   580  00FFB8  EFFA  F07F         	goto	l1753
   581  00FFBC                     u1180:
   582  00FFBC  503D               	movf	_btn_backward_status^0,w,c
   583  00FFBE  A4D8               	btfss	status,2,c
   584  00FFC0  EFE4  F07F         	goto	u1191
   585  00FFC4  EFE6  F07F         	goto	u1190
   586  00FFC8                     u1191:
   587  00FFC8  EFFA  F07F         	goto	l1753
   588  00FFCC                     u1190:
   589  00FFCC  503C               	movf	_btn_right_status^0,w,c
   590  00FFCE  A4D8               	btfss	status,2,c
   591  00FFD0  EFEC  F07F         	goto	u1201
   592  00FFD4  EFEE  F07F         	goto	u1200
   593  00FFD8                     u1201:
   594  00FFD8  EFFA  F07F         	goto	l1753
   595  00FFDC                     u1200:
   596  00FFDC  043B               	decf	_btn_left_status^0,w,c
   597  00FFDE  A4D8               	btfss	status,2,c
   598  00FFE0  EFF4  F07F         	goto	u1211
   599  00FFE4  EFF6  F07F         	goto	u1210
   600  00FFE8                     u1211:
   601  00FFE8  EFFA  F07F         	goto	l1753
   602  00FFEC                     u1210:
   603  00FFEC                     
   604                           ;application.c: 99:            &&btn_right_status == BUTTON_NOT_PRESSED && btn_left_stat
      +                          us == BUTTON_PRESSED){;application.c: 100:              robot_twist_left();
   605  00FFEC  EC0A  F07C         	call	_robot_twist_left	;wreg free
   606                           
   607                           ;application.c: 101:         }
   608  00FFF0  EF42  F07F         	goto	l279
   609  00FFF4                     l1753:
   610                           
   611                           ;application.c: 103:             robot_move_stop();
   612  00FFF4  ECF1  F07B         	call	_robot_move_stop	;wreg free
   613  00FFF8  EF42  F07F         	goto	l279
   614  00FFFC  EF00  F000         	goto	start
   615  010000                     __end_of_main:
   616                           	callstack 0
   617                           
   618 ;; *************** function _robot_twist_right *****************
   619 ;; Defined at:
   620 ;;		line 37 in file "application.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;		None
   623 ;; Auto vars:     Size  Location     Type
   624 ;;		None
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   638 ;;Total ram usage:        0 bytes
   639 ;; Hardware stack levels used:    1
   640 ;; Hardware stack levels required when called:    3
   641 ;; This function calls:
   642 ;;		_dc_motor_rotate_left
   643 ;;		_dc_motor_rotate_right
   644 ;; This function is called by:
   645 ;;		_main
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           	psect	text1
   650  00F846                     __ptext1:
   651                           	callstack 0
   652  00F846                     _robot_twist_right:
   653                           	callstack 27
   654  00F846                     
   655                           ;application.c: 38:     dc_motor_rotate_right(&dc_motor_1);
   656  00F846  0E25               	movlw	low _dc_motor_1
   657  00F848  6E38               	movwf	dc_motor_rotate_right@dc_motor^0,c
   658  00F84A  0E00               	movlw	high _dc_motor_1
   659  00F84C  6E39               	movwf	(dc_motor_rotate_right@dc_motor+1)^0,c
   660  00F84E  EC89  F07C         	call	_dc_motor_rotate_right	;wreg free
   661                           
   662                           ;application.c: 39:     dc_motor_rotate_left(&dc_motor_2);
   663  00F852  0E23               	movlw	low _dc_motor_2
   664  00F854  6E38               	movwf	dc_motor_rotate_left@dc_motor^0,c
   665  00F856  0E00               	movlw	high _dc_motor_2
   666  00F858  6E39               	movwf	(dc_motor_rotate_left@dc_motor+1)^0,c
   667  00F85A  EC6F  F07C         	call	_dc_motor_rotate_left	;wreg free
   668                           
   669                           ;application.c: 40:     dc_motor_rotate_left(&dc_motor_3);
   670  00F85E  0E21               	movlw	low _dc_motor_3
   671  00F860  6E38               	movwf	dc_motor_rotate_left@dc_motor^0,c
   672  00F862  0E00               	movlw	high _dc_motor_3
   673  00F864  6E39               	movwf	(dc_motor_rotate_left@dc_motor+1)^0,c
   674  00F866  EC6F  F07C         	call	_dc_motor_rotate_left	;wreg free
   675                           
   676                           ;application.c: 41:     dc_motor_rotate_right(&dc_motor_4);
   677  00F86A  0E1F               	movlw	low _dc_motor_4
   678  00F86C  6E38               	movwf	dc_motor_rotate_right@dc_motor^0,c
   679  00F86E  0E00               	movlw	high _dc_motor_4
   680  00F870  6E39               	movwf	(dc_motor_rotate_right@dc_motor+1)^0,c
   681  00F872  EC89  F07C         	call	_dc_motor_rotate_right	;wreg free
   682  00F876  0012               	return		;funcret
   683  00F878                     __end_of_robot_twist_right:
   684                           	callstack 0
   685                           
   686 ;; *************** function _robot_twist_left *****************
   687 ;; Defined at:
   688 ;;		line 44 in file "application.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;		None
   691 ;; Auto vars:     Size  Location     Type
   692 ;;		None
   693 ;; Return value:  Size  Location     Type
   694 ;;                  1    wreg      void 
   695 ;; Registers used:
   696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   697 ;; Tracked objects:
   698 ;;		On entry : 0/0
   699 ;;		On exit  : 0/0
   700 ;;		Unchanged: 0/0
   701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   706 ;;Total ram usage:        0 bytes
   707 ;; Hardware stack levels used:    1
   708 ;; Hardware stack levels required when called:    3
   709 ;; This function calls:
   710 ;;		_dc_motor_rotate_left
   711 ;;		_dc_motor_rotate_right
   712 ;; This function is called by:
   713 ;;		_main
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           	psect	text2
   718  00F814                     __ptext2:
   719                           	callstack 0
   720  00F814                     _robot_twist_left:
   721                           	callstack 27
   722  00F814                     
   723                           ;application.c: 45:     dc_motor_rotate_left(&dc_motor_1);
   724  00F814  0E25               	movlw	low _dc_motor_1
   725  00F816  6E38               	movwf	dc_motor_rotate_left@dc_motor^0,c
   726  00F818  0E00               	movlw	high _dc_motor_1
   727  00F81A  6E39               	movwf	(dc_motor_rotate_left@dc_motor+1)^0,c
   728  00F81C  EC6F  F07C         	call	_dc_motor_rotate_left	;wreg free
   729                           
   730                           ;application.c: 46:     dc_motor_rotate_right(&dc_motor_2);
   731  00F820  0E23               	movlw	low _dc_motor_2
   732  00F822  6E38               	movwf	dc_motor_rotate_right@dc_motor^0,c
   733  00F824  0E00               	movlw	high _dc_motor_2
   734  00F826  6E39               	movwf	(dc_motor_rotate_right@dc_motor+1)^0,c
   735  00F828  EC89  F07C         	call	_dc_motor_rotate_right	;wreg free
   736                           
   737                           ;application.c: 47:     dc_motor_rotate_right(&dc_motor_3);
   738  00F82C  0E21               	movlw	low _dc_motor_3
   739  00F82E  6E38               	movwf	dc_motor_rotate_right@dc_motor^0,c
   740  00F830  0E00               	movlw	high _dc_motor_3
   741  00F832  6E39               	movwf	(dc_motor_rotate_right@dc_motor+1)^0,c
   742  00F834  EC89  F07C         	call	_dc_motor_rotate_right	;wreg free
   743                           
   744                           ;application.c: 48:     dc_motor_rotate_left(&dc_motor_4);
   745  00F838  0E1F               	movlw	low _dc_motor_4
   746  00F83A  6E38               	movwf	dc_motor_rotate_left@dc_motor^0,c
   747  00F83C  0E00               	movlw	high _dc_motor_4
   748  00F83E  6E39               	movwf	(dc_motor_rotate_left@dc_motor+1)^0,c
   749  00F840  EC6F  F07C         	call	_dc_motor_rotate_left	;wreg free
   750  00F844  0012               	return		;funcret
   751  00F846                     __end_of_robot_twist_left:
   752                           	callstack 0
   753                           
   754 ;; *************** function _robot_move_stop *****************
   755 ;; Defined at:
   756 ;;		line 58 in file "application.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;		None
   759 ;; Auto vars:     Size  Location     Type
   760 ;;		None
   761 ;; Return value:  Size  Location     Type
   762 ;;                  1    wreg      void 
   763 ;; Registers used:
   764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   774 ;;Total ram usage:        0 bytes
   775 ;; Hardware stack levels used:    1
   776 ;; Hardware stack levels required when called:    3
   777 ;; This function calls:
   778 ;;		_dc_motor_stop
   779 ;; This function is called by:
   780 ;;		_main
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           	psect	text3
   785  00F7E2                     __ptext3:
   786                           	callstack 0
   787  00F7E2                     _robot_move_stop:
   788                           	callstack 27
   789  00F7E2                     
   790                           ;application.c: 59:     dc_motor_stop(&dc_motor_1);
   791  00F7E2  0E25               	movlw	low _dc_motor_1
   792  00F7E4  6E38               	movwf	dc_motor_stop@dc_motor^0,c
   793  00F7E6  0E00               	movlw	high _dc_motor_1
   794  00F7E8  6E39               	movwf	(dc_motor_stop@dc_motor+1)^0,c
   795  00F7EA  ECA3  F07C         	call	_dc_motor_stop	;wreg free
   796                           
   797                           ;application.c: 60:     dc_motor_stop(&dc_motor_2);
   798  00F7EE  0E23               	movlw	low _dc_motor_2
   799  00F7F0  6E38               	movwf	dc_motor_stop@dc_motor^0,c
   800  00F7F2  0E00               	movlw	high _dc_motor_2
   801  00F7F4  6E39               	movwf	(dc_motor_stop@dc_motor+1)^0,c
   802  00F7F6  ECA3  F07C         	call	_dc_motor_stop	;wreg free
   803                           
   804                           ;application.c: 61:     dc_motor_stop(&dc_motor_3);
   805  00F7FA  0E21               	movlw	low _dc_motor_3
   806  00F7FC  6E38               	movwf	dc_motor_stop@dc_motor^0,c
   807  00F7FE  0E00               	movlw	high _dc_motor_3
   808  00F800  6E39               	movwf	(dc_motor_stop@dc_motor+1)^0,c
   809  00F802  ECA3  F07C         	call	_dc_motor_stop	;wreg free
   810                           
   811                           ;application.c: 62:     dc_motor_stop(&dc_motor_4);
   812  00F806  0E1F               	movlw	low _dc_motor_4
   813  00F808  6E38               	movwf	dc_motor_stop@dc_motor^0,c
   814  00F80A  0E00               	movlw	high _dc_motor_4
   815  00F80C  6E39               	movwf	(dc_motor_stop@dc_motor+1)^0,c
   816  00F80E  ECA3  F07C         	call	_dc_motor_stop	;wreg free
   817  00F812  0012               	return		;funcret
   818  00F814                     __end_of_robot_move_stop:
   819                           	callstack 0
   820                           
   821 ;; *************** function _dc_motor_stop *****************
   822 ;; Defined at:
   823 ;;		line 78 in file "ecu/dc_motor/ecu_dc_motor.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;  dc_motor        2   13[COMRAM] PTR struct .
   826 ;;		 -> dc_motor_4(2), dc_motor_3(2), dc_motor_2(2), dc_motor_1(2), 
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  ret             1    0        enum E329
   829 ;; Return value:  Size  Location     Type
   830 ;;                  1    wreg      enum E329
   831 ;; Registers used:
   832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   838 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   841 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   842 ;;Total ram usage:        3 bytes
   843 ;; Hardware stack levels used:    1
   844 ;; Hardware stack levels required when called:    2
   845 ;; This function calls:
   846 ;;		_relay_turn_off
   847 ;; This function is called by:
   848 ;;		_robot_move_stop
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           	psect	text4
   853  00F946                     __ptext4:
   854                           	callstack 0
   855  00F946                     _dc_motor_stop:
   856                           	callstack 27
   857  00F946                     
   858                           ;ecu/dc_motor/ecu_dc_motor.c: 80:     if (dc_motor == ((void*)0)){
   859  00F946  5038               	movf	dc_motor_stop@dc_motor^0,w,c
   860  00F948  1039               	iorwf	(dc_motor_stop@dc_motor+1)^0,w,c
   861  00F94A  A4D8               	btfss	status,2,c
   862  00F94C  EFAA  F07C         	goto	u891
   863  00F950  EFAC  F07C         	goto	u890
   864  00F954                     u891:
   865  00F954  EFAE  F07C         	goto	l1595
   866  00F958                     u890:
   867  00F958  EFBC  F07C         	goto	l43
   868  00F95C                     l1595:
   869                           
   870                           ;ecu/dc_motor/ecu_dc_motor.c: 85:         relay_turn_off(& (dc_motor->relay1));
   871  00F95C  C038  F034         	movff	dc_motor_stop@dc_motor,relay_turn_off@relay
   872  00F960  C039  F035         	movff	dc_motor_stop@dc_motor+1,relay_turn_off@relay+1
   873  00F964  EC30  F07D         	call	_relay_turn_off	;wreg free
   874                           
   875                           ;ecu/dc_motor/ecu_dc_motor.c: 86:         relay_turn_off(& (dc_motor->relay2));
   876  00F968  0E01               	movlw	1
   877  00F96A  2438               	addwf	dc_motor_stop@dc_motor^0,w,c
   878  00F96C  6E34               	movwf	relay_turn_off@relay^0,c
   879  00F96E  0E00               	movlw	0
   880  00F970  2039               	addwfc	(dc_motor_stop@dc_motor+1)^0,w,c
   881  00F972  6E35               	movwf	(relay_turn_off@relay+1)^0,c
   882  00F974  EC30  F07D         	call	_relay_turn_off	;wreg free
   883  00F978                     l43:
   884  00F978  0012               	return		;funcret
   885  00F97A                     __end_of_dc_motor_stop:
   886                           	callstack 0
   887                           
   888 ;; *************** function _robot_move_forward *****************
   889 ;; Defined at:
   890 ;;		line 30 in file "application.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   908 ;;Total ram usage:        0 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    3
   911 ;; This function calls:
   912 ;;		_dc_motor_rotate_right
   913 ;; This function is called by:
   914 ;;		_main
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text5
   919  00F7B0                     __ptext5:
   920                           	callstack 0
   921  00F7B0                     _robot_move_forward:
   922                           	callstack 27
   923  00F7B0                     
   924                           ;application.c: 31:     dc_motor_rotate_right(&dc_motor_1);
   925  00F7B0  0E25               	movlw	low _dc_motor_1
   926  00F7B2  6E38               	movwf	dc_motor_rotate_right@dc_motor^0,c
   927  00F7B4  0E00               	movlw	high _dc_motor_1
   928  00F7B6  6E39               	movwf	(dc_motor_rotate_right@dc_motor+1)^0,c
   929  00F7B8  EC89  F07C         	call	_dc_motor_rotate_right	;wreg free
   930                           
   931                           ;application.c: 32:     dc_motor_rotate_right(&dc_motor_2);
   932  00F7BC  0E23               	movlw	low _dc_motor_2
   933  00F7BE  6E38               	movwf	dc_motor_rotate_right@dc_motor^0,c
   934  00F7C0  0E00               	movlw	high _dc_motor_2
   935  00F7C2  6E39               	movwf	(dc_motor_rotate_right@dc_motor+1)^0,c
   936  00F7C4  EC89  F07C         	call	_dc_motor_rotate_right	;wreg free
   937                           
   938                           ;application.c: 33:     dc_motor_rotate_right(&dc_motor_3);
   939  00F7C8  0E21               	movlw	low _dc_motor_3
   940  00F7CA  6E38               	movwf	dc_motor_rotate_right@dc_motor^0,c
   941  00F7CC  0E00               	movlw	high _dc_motor_3
   942  00F7CE  6E39               	movwf	(dc_motor_rotate_right@dc_motor+1)^0,c
   943  00F7D0  EC89  F07C         	call	_dc_motor_rotate_right	;wreg free
   944                           
   945                           ;application.c: 34:     dc_motor_rotate_right(&dc_motor_4);
   946  00F7D4  0E1F               	movlw	low _dc_motor_4
   947  00F7D6  6E38               	movwf	dc_motor_rotate_right@dc_motor^0,c
   948  00F7D8  0E00               	movlw	high _dc_motor_4
   949  00F7DA  6E39               	movwf	(dc_motor_rotate_right@dc_motor+1)^0,c
   950  00F7DC  EC89  F07C         	call	_dc_motor_rotate_right	;wreg free
   951  00F7E0  0012               	return		;funcret
   952  00F7E2                     __end_of_robot_move_forward:
   953                           	callstack 0
   954                           
   955 ;; *************** function _dc_motor_rotate_right *****************
   956 ;; Defined at:
   957 ;;		line 37 in file "ecu/dc_motor/ecu_dc_motor.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  dc_motor        2   13[COMRAM] PTR struct .
   960 ;;		 -> dc_motor_4(2), dc_motor_3(2), dc_motor_2(2), dc_motor_1(2), 
   961 ;; Auto vars:     Size  Location     Type
   962 ;;  ret             1    0        enum E329
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      enum E329
   965 ;; Registers used:
   966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   972 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   973 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   975 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   976 ;;Total ram usage:        3 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    2
   979 ;; This function calls:
   980 ;;		_relay_turn_off
   981 ;;		_relay_turn_on
   982 ;; This function is called by:
   983 ;;		_robot_move_forward
   984 ;;		_robot_twist_right
   985 ;;		_robot_twist_left
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text6
   990  00F912                     __ptext6:
   991                           	callstack 0
   992  00F912                     _dc_motor_rotate_right:
   993                           	callstack 27
   994  00F912                     
   995                           ;ecu/dc_motor/ecu_dc_motor.c: 39:     if (dc_motor == ((void*)0)){
   996  00F912  5038               	movf	dc_motor_rotate_right@dc_motor^0,w,c
   997  00F914  1039               	iorwf	(dc_motor_rotate_right@dc_motor+1)^0,w,c
   998  00F916  A4D8               	btfss	status,2,c
   999  00F918  EF90  F07C         	goto	u871
  1000  00F91C  EF92  F07C         	goto	u870
  1001  00F920                     u871:
  1002  00F920  EF94  F07C         	goto	l1567
  1003  00F924                     u870:
  1004  00F924  EFA2  F07C         	goto	l33
  1005  00F928                     l1567:
  1006                           
  1007                           ;ecu/dc_motor/ecu_dc_motor.c: 44:         relay_turn_on (& (dc_motor->relay1));
  1008  00F928  C038  F034         	movff	dc_motor_rotate_right@dc_motor,relay_turn_on@relay
  1009  00F92C  C039  F035         	movff	dc_motor_rotate_right@dc_motor+1,relay_turn_on@relay+1
  1010  00F930  EC70  F07D         	call	_relay_turn_on	;wreg free
  1011                           
  1012                           ;ecu/dc_motor/ecu_dc_motor.c: 45:         relay_turn_off(& (dc_motor->relay2));
  1013  00F934  0E01               	movlw	1
  1014  00F936  2438               	addwf	dc_motor_rotate_right@dc_motor^0,w,c
  1015  00F938  6E34               	movwf	relay_turn_off@relay^0,c
  1016  00F93A  0E00               	movlw	0
  1017  00F93C  2039               	addwfc	(dc_motor_rotate_right@dc_motor+1)^0,w,c
  1018  00F93E  6E35               	movwf	(relay_turn_off@relay+1)^0,c
  1019  00F940  EC30  F07D         	call	_relay_turn_off	;wreg free
  1020  00F944                     l33:
  1021  00F944  0012               	return		;funcret
  1022  00F946                     __end_of_dc_motor_rotate_right:
  1023                           	callstack 0
  1024                           
  1025 ;; *************** function _robot_move_backward *****************
  1026 ;; Defined at:
  1027 ;;		line 51 in file "application.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;		None
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;		None
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1045 ;;Total ram usage:        0 bytes
  1046 ;; Hardware stack levels used:    1
  1047 ;; Hardware stack levels required when called:    3
  1048 ;; This function calls:
  1049 ;;		_dc_motor_rotate_left
  1050 ;; This function is called by:
  1051 ;;		_main
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           	psect	text7
  1056  00F77E                     __ptext7:
  1057                           	callstack 0
  1058  00F77E                     _robot_move_backward:
  1059                           	callstack 27
  1060  00F77E                     
  1061                           ;application.c: 52:     dc_motor_rotate_left(&dc_motor_1);
  1062  00F77E  0E25               	movlw	low _dc_motor_1
  1063  00F780  6E38               	movwf	dc_motor_rotate_left@dc_motor^0,c
  1064  00F782  0E00               	movlw	high _dc_motor_1
  1065  00F784  6E39               	movwf	(dc_motor_rotate_left@dc_motor+1)^0,c
  1066  00F786  EC6F  F07C         	call	_dc_motor_rotate_left	;wreg free
  1067                           
  1068                           ;application.c: 53:     dc_motor_rotate_left(&dc_motor_2);
  1069  00F78A  0E23               	movlw	low _dc_motor_2
  1070  00F78C  6E38               	movwf	dc_motor_rotate_left@dc_motor^0,c
  1071  00F78E  0E00               	movlw	high _dc_motor_2
  1072  00F790  6E39               	movwf	(dc_motor_rotate_left@dc_motor+1)^0,c
  1073  00F792  EC6F  F07C         	call	_dc_motor_rotate_left	;wreg free
  1074                           
  1075                           ;application.c: 54:     dc_motor_rotate_left(&dc_motor_3);
  1076  00F796  0E21               	movlw	low _dc_motor_3
  1077  00F798  6E38               	movwf	dc_motor_rotate_left@dc_motor^0,c
  1078  00F79A  0E00               	movlw	high _dc_motor_3
  1079  00F79C  6E39               	movwf	(dc_motor_rotate_left@dc_motor+1)^0,c
  1080  00F79E  EC6F  F07C         	call	_dc_motor_rotate_left	;wreg free
  1081                           
  1082                           ;application.c: 55:     dc_motor_rotate_left(&dc_motor_4);
  1083  00F7A2  0E1F               	movlw	low _dc_motor_4
  1084  00F7A4  6E38               	movwf	dc_motor_rotate_left@dc_motor^0,c
  1085  00F7A6  0E00               	movlw	high _dc_motor_4
  1086  00F7A8  6E39               	movwf	(dc_motor_rotate_left@dc_motor+1)^0,c
  1087  00F7AA  EC6F  F07C         	call	_dc_motor_rotate_left	;wreg free
  1088  00F7AE  0012               	return		;funcret
  1089  00F7B0                     __end_of_robot_move_backward:
  1090                           	callstack 0
  1091                           
  1092 ;; *************** function _dc_motor_rotate_left *****************
  1093 ;; Defined at:
  1094 ;;		line 57 in file "ecu/dc_motor/ecu_dc_motor.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;  dc_motor        2   13[COMRAM] PTR struct .
  1097 ;;		 -> dc_motor_4(2), dc_motor_3(2), dc_motor_2(2), dc_motor_1(2), 
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  ret             1    0        enum E329
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      enum E329
  1102 ;; Registers used:
  1103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1109 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;Total ram usage:        3 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    2
  1116 ;; This function calls:
  1117 ;;		_relay_turn_off
  1118 ;;		_relay_turn_on
  1119 ;; This function is called by:
  1120 ;;		_robot_twist_right
  1121 ;;		_robot_twist_left
  1122 ;;		_robot_move_backward
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text8
  1127  00F8DE                     __ptext8:
  1128                           	callstack 0
  1129  00F8DE                     _dc_motor_rotate_left:
  1130                           	callstack 27
  1131  00F8DE                     
  1132                           ;ecu/dc_motor/ecu_dc_motor.c: 59:     if (dc_motor == ((void*)0)){
  1133  00F8DE  5038               	movf	dc_motor_rotate_left@dc_motor^0,w,c
  1134  00F8E0  1039               	iorwf	(dc_motor_rotate_left@dc_motor+1)^0,w,c
  1135  00F8E2  A4D8               	btfss	status,2,c
  1136  00F8E4  EF76  F07C         	goto	u881
  1137  00F8E8  EF78  F07C         	goto	u880
  1138  00F8EC                     u881:
  1139  00F8EC  EF7A  F07C         	goto	l1581
  1140  00F8F0                     u880:
  1141  00F8F0  EF88  F07C         	goto	l38
  1142  00F8F4                     l1581:
  1143                           
  1144                           ;ecu/dc_motor/ecu_dc_motor.c: 64:         relay_turn_off(& (dc_motor->relay1));
  1145  00F8F4  C038  F034         	movff	dc_motor_rotate_left@dc_motor,relay_turn_off@relay
  1146  00F8F8  C039  F035         	movff	dc_motor_rotate_left@dc_motor+1,relay_turn_off@relay+1
  1147  00F8FC  EC30  F07D         	call	_relay_turn_off	;wreg free
  1148                           
  1149                           ;ecu/dc_motor/ecu_dc_motor.c: 65:         relay_turn_on (& (dc_motor->relay2));
  1150  00F900  0E01               	movlw	1
  1151  00F902  2438               	addwf	dc_motor_rotate_left@dc_motor^0,w,c
  1152  00F904  6E34               	movwf	relay_turn_on@relay^0,c
  1153  00F906  0E00               	movlw	0
  1154  00F908  2039               	addwfc	(dc_motor_rotate_left@dc_motor+1)^0,w,c
  1155  00F90A  6E35               	movwf	(relay_turn_on@relay+1)^0,c
  1156  00F90C  EC70  F07D         	call	_relay_turn_on	;wreg free
  1157  00F910                     l38:
  1158  00F910  0012               	return		;funcret
  1159  00F912                     __end_of_dc_motor_rotate_left:
  1160                           	callstack 0
  1161                           
  1162 ;; *************** function _relay_turn_on *****************
  1163 ;; Defined at:
  1164 ;;		line 41 in file "ecu/relay/ecu_relay.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;  relay           2    9[COMRAM] PTR struct .
  1167 ;;		 -> dc_motor_4(2), dc_motor_3(2), dc_motor_2(2), dc_motor_1(2), 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  ret             1    0        enum E329
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      enum E329
  1172 ;; Registers used:
  1173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1182 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1183 ;;Total ram usage:        4 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; Hardware stack levels required when called:    1
  1186 ;; This function calls:
  1187 ;;		_gpio_pin_write_value
  1188 ;; This function is called by:
  1189 ;;		_dc_motor_rotate_right
  1190 ;;		_dc_motor_rotate_left
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text9
  1195  00FAE0                     __ptext9:
  1196                           	callstack 0
  1197  00FAE0                     _relay_turn_on:
  1198                           	callstack 27
  1199  00FAE0                     
  1200                           ;ecu/relay/ecu_relay.c: 44:     if ( (((void*)0) == relay ) || (relay ->port_name > 5U -
      +                          1 )
  1201  00FAE0  5034               	movf	relay_turn_on@relay^0,w,c
  1202  00FAE2  1035               	iorwf	(relay_turn_on@relay+1)^0,w,c
  1203  00FAE4  B4D8               	btfsc	status,2,c
  1204  00FAE6  EF77  F07D         	goto	u751
  1205  00FAEA  EF79  F07D         	goto	u750
  1206  00FAEE                     u751:
  1207  00FAEE  EFAF  F07D         	goto	l95
  1208  00FAF2                     u750:
  1209  00FAF2  C034  FFD9         	movff	relay_turn_on@relay,fsr2l
  1210  00FAF6  C035  FFDA         	movff	relay_turn_on@relay+1,fsr2h
  1211  00FAFA  50DF               	movf	indf2,w,c
  1212  00FAFC  0B0F               	andlw	15
  1213  00FAFE  6E36               	movwf	??_relay_turn_on^0,c
  1214  00FB00  0E05               	movlw	5
  1215  00FB02  6036               	cpfslt	??_relay_turn_on^0,c
  1216  00FB04  EF86  F07D         	goto	u761
  1217  00FB08  EF88  F07D         	goto	u760
  1218  00FB0C                     u761:
  1219  00FB0C  EFAF  F07D         	goto	l95
  1220  00FB10                     u760:
  1221  00FB10  C034  FFD9         	movff	relay_turn_on@relay,fsr2l
  1222  00FB14  C035  FFDA         	movff	relay_turn_on@relay+1,fsr2h
  1223  00FB18  38DF               	swapf	indf2,w,c
  1224  00FB1A  0B07               	andlw	7
  1225  00FB1C  6E36               	movwf	??_relay_turn_on^0,c
  1226  00FB1E  0E07               	movlw	7
  1227  00FB20  6436               	cpfsgt	??_relay_turn_on^0,c
  1228  00FB22  EF95  F07D         	goto	u771
  1229  00FB26  EF97  F07D         	goto	u770
  1230  00FB2A                     u771:
  1231  00FB2A  EF99  F07D         	goto	l1503
  1232  00FB2E                     u770:
  1233  00FB2E  EFAF  F07D         	goto	l95
  1234  00FB32                     l1503:
  1235                           
  1236                           ;ecu/relay/ecu_relay.c: 51:         gpio_pin_write_value(relay->port_name , relay->pin ,
      +                           HIGH );
  1237  00FB32  C034  FFD9         	movff	relay_turn_on@relay,fsr2l
  1238  00FB36  C035  FFDA         	movff	relay_turn_on@relay+1,fsr2h
  1239  00FB3A  38DF               	swapf	indf2,w,c
  1240  00FB3C  0B07               	andlw	7
  1241  00FB3E  6E2B               	movwf	gpio_pin_write_value@pin^0,c
  1242  00FB40  0E01               	movlw	1
  1243  00FB42  6E2C               	movwf	gpio_pin_write_value@logic^0,c
  1244  00FB44  C034  FFD9         	movff	relay_turn_on@relay,fsr2l
  1245  00FB48  C035  FFDA         	movff	relay_turn_on@relay+1,fsr2h
  1246  00FB4C  50DF               	movf	indf2,w,c
  1247  00FB4E  0B0F               	andlw	15
  1248  00FB50  ECAE  F07E         	call	_gpio_pin_write_value
  1249  00FB54                     
  1250                           ;ecu/relay/ecu_relay.c: 52:         relay->relay_status = RELAY_ON;
  1251  00FB54  C034  FFD9         	movff	relay_turn_on@relay,fsr2l
  1252  00FB58  C035  FFDA         	movff	relay_turn_on@relay+1,fsr2h
  1253  00FB5C  9EDF               	bcf	indf2,7,c
  1254  00FB5E                     l95:
  1255  00FB5E  0012               	return		;funcret
  1256  00FB60                     __end_of_relay_turn_on:
  1257                           	callstack 0
  1258                           
  1259 ;; *************** function _relay_turn_off *****************
  1260 ;; Defined at:
  1261 ;;		line 65 in file "ecu/relay/ecu_relay.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;  relay           2    9[COMRAM] PTR struct .
  1264 ;;		 -> dc_motor_4(2), dc_motor_3(2), dc_motor_2(2), dc_motor_1(2), 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;  ret             1    0        enum E329
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      enum E329
  1269 ;; Registers used:
  1270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1276 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1277 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1278 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1279 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1280 ;;Total ram usage:        4 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    1
  1283 ;; This function calls:
  1284 ;;		_gpio_pin_write_value
  1285 ;; This function is called by:
  1286 ;;		_dc_motor_rotate_right
  1287 ;;		_dc_motor_rotate_left
  1288 ;;		_dc_motor_stop
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           	psect	text10
  1293  00FA60                     __ptext10:
  1294                           	callstack 0
  1295  00FA60                     _relay_turn_off:
  1296                           	callstack 27
  1297  00FA60                     
  1298                           ;ecu/relay/ecu_relay.c: 68:     if ( (((void*)0) == relay ) || (relay ->port_name > 5U -
      +                          1 )
  1299  00FA60  5034               	movf	relay_turn_off@relay^0,w,c
  1300  00FA62  1035               	iorwf	(relay_turn_off@relay+1)^0,w,c
  1301  00FA64  B4D8               	btfsc	status,2,c
  1302  00FA66  EF37  F07D         	goto	u781
  1303  00FA6A  EF39  F07D         	goto	u780
  1304  00FA6E                     u781:
  1305  00FA6E  EF6F  F07D         	goto	l102
  1306  00FA72                     u780:
  1307  00FA72  C034  FFD9         	movff	relay_turn_off@relay,fsr2l
  1308  00FA76  C035  FFDA         	movff	relay_turn_off@relay+1,fsr2h
  1309  00FA7A  50DF               	movf	indf2,w,c
  1310  00FA7C  0B0F               	andlw	15
  1311  00FA7E  6E36               	movwf	??_relay_turn_off^0,c
  1312  00FA80  0E05               	movlw	5
  1313  00FA82  6036               	cpfslt	??_relay_turn_off^0,c
  1314  00FA84  EF46  F07D         	goto	u791
  1315  00FA88  EF48  F07D         	goto	u790
  1316  00FA8C                     u791:
  1317  00FA8C  EF6F  F07D         	goto	l102
  1318  00FA90                     u790:
  1319  00FA90  C034  FFD9         	movff	relay_turn_off@relay,fsr2l
  1320  00FA94  C035  FFDA         	movff	relay_turn_off@relay+1,fsr2h
  1321  00FA98  38DF               	swapf	indf2,w,c
  1322  00FA9A  0B07               	andlw	7
  1323  00FA9C  6E36               	movwf	??_relay_turn_off^0,c
  1324  00FA9E  0E07               	movlw	7
  1325  00FAA0  6436               	cpfsgt	??_relay_turn_off^0,c
  1326  00FAA2  EF55  F07D         	goto	u801
  1327  00FAA6  EF57  F07D         	goto	u800
  1328  00FAAA                     u801:
  1329  00FAAA  EF59  F07D         	goto	l1521
  1330  00FAAE                     u800:
  1331  00FAAE  EF6F  F07D         	goto	l102
  1332  00FAB2                     l1521:
  1333                           
  1334                           ;ecu/relay/ecu_relay.c: 75:         gpio_pin_write_value(relay->port_name , relay->pin ,
      +                           LOW );
  1335  00FAB2  C034  FFD9         	movff	relay_turn_off@relay,fsr2l
  1336  00FAB6  C035  FFDA         	movff	relay_turn_off@relay+1,fsr2h
  1337  00FABA  38DF               	swapf	indf2,w,c
  1338  00FABC  0B07               	andlw	7
  1339  00FABE  6E2B               	movwf	gpio_pin_write_value@pin^0,c
  1340  00FAC0  0E00               	movlw	0
  1341  00FAC2  6E2C               	movwf	gpio_pin_write_value@logic^0,c
  1342  00FAC4  C034  FFD9         	movff	relay_turn_off@relay,fsr2l
  1343  00FAC8  C035  FFDA         	movff	relay_turn_off@relay+1,fsr2h
  1344  00FACC  50DF               	movf	indf2,w,c
  1345  00FACE  0B0F               	andlw	15
  1346  00FAD0  ECAE  F07E         	call	_gpio_pin_write_value
  1347  00FAD4                     
  1348                           ;ecu/relay/ecu_relay.c: 76:         relay->relay_status = RELAY_OFF;
  1349  00FAD4  C034  FFD9         	movff	relay_turn_off@relay,fsr2l
  1350  00FAD8  C035  FFDA         	movff	relay_turn_off@relay+1,fsr2h
  1351  00FADC  8EDF               	bsf	indf2,7,c
  1352  00FADE                     l102:
  1353  00FADE  0012               	return		;funcret
  1354  00FAE0                     __end_of_relay_turn_off:
  1355                           	callstack 0
  1356                           
  1357 ;; *************** function _dc_motor_initialize *****************
  1358 ;; Defined at:
  1359 ;;		line 18 in file "ecu/dc_motor/ecu_dc_motor.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  dc_motor        2   13[COMRAM] PTR struct .
  1362 ;;		 -> dc_motor_4(2), dc_motor_3(2), dc_motor_2(2), dc_motor_1(2), 
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;  ret             1    0        enum E329
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      enum E329
  1367 ;; Registers used:
  1368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1374 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1377 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1378 ;;Total ram usage:        3 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; Hardware stack levels required when called:    2
  1381 ;; This function calls:
  1382 ;;		_relay_initialize
  1383 ;; This function is called by:
  1384 ;;		_main
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           	psect	text11
  1389  00F8AA                     __ptext11:
  1390                           	callstack 0
  1391  00F8AA                     _dc_motor_initialize:
  1392                           	callstack 28
  1393  00F8AA                     
  1394                           ;ecu/dc_motor/ecu_dc_motor.c: 20:     if (dc_motor == ((void*)0)){
  1395  00F8AA  5038               	movf	dc_motor_initialize@dc_motor^0,w,c
  1396  00F8AC  1039               	iorwf	(dc_motor_initialize@dc_motor+1)^0,w,c
  1397  00F8AE  A4D8               	btfss	status,2,c
  1398  00F8B0  EF5C  F07C         	goto	u961
  1399  00F8B4  EF5E  F07C         	goto	u960
  1400  00F8B8                     u961:
  1401  00F8B8  EF60  F07C         	goto	l1643
  1402  00F8BC                     u960:
  1403  00F8BC  EF6E  F07C         	goto	l28
  1404  00F8C0                     l1643:
  1405                           
  1406                           ;ecu/dc_motor/ecu_dc_motor.c: 25:         relay_initialize( & (dc_motor->relay1));
  1407  00F8C0  C038  F034         	movff	dc_motor_initialize@dc_motor,relay_initialize@relay
  1408  00F8C4  C039  F035         	movff	dc_motor_initialize@dc_motor+1,relay_initialize@relay+1
  1409  00F8C8  ECB0  F07D         	call	_relay_initialize	;wreg free
  1410                           
  1411                           ;ecu/dc_motor/ecu_dc_motor.c: 26:         relay_initialize( & (dc_motor->relay2));
  1412  00F8CC  0E01               	movlw	1
  1413  00F8CE  2438               	addwf	dc_motor_initialize@dc_motor^0,w,c
  1414  00F8D0  6E34               	movwf	relay_initialize@relay^0,c
  1415  00F8D2  0E00               	movlw	0
  1416  00F8D4  2039               	addwfc	(dc_motor_initialize@dc_motor+1)^0,w,c
  1417  00F8D6  6E35               	movwf	(relay_initialize@relay+1)^0,c
  1418  00F8D8  ECB0  F07D         	call	_relay_initialize	;wreg free
  1419  00F8DC                     l28:
  1420  00F8DC  0012               	return		;funcret
  1421  00F8DE                     __end_of_dc_motor_initialize:
  1422                           	callstack 0
  1423                           
  1424 ;; *************** function _relay_initialize *****************
  1425 ;; Defined at:
  1426 ;;		line 19 in file "ecu/relay/ecu_relay.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  relay           2    9[COMRAM] PTR struct .
  1429 ;;		 -> dc_motor_4(2), dc_motor_3(2), dc_motor_2(2), dc_motor_1(2), 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  ret             1    0        enum E329
  1432 ;; Return value:  Size  Location     Type
  1433 ;;                  1    wreg      enum E329
  1434 ;; Registers used:
  1435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1436 ;; Tracked objects:
  1437 ;;		On entry : 0/0
  1438 ;;		On exit  : 0/0
  1439 ;;		Unchanged: 0/0
  1440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1441 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1444 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1445 ;;Total ram usage:        4 bytes
  1446 ;; Hardware stack levels used:    1
  1447 ;; Hardware stack levels required when called:    1
  1448 ;; This function calls:
  1449 ;;		_gpio_pin_direction_initialize
  1450 ;;		_gpio_pin_write_value
  1451 ;; This function is called by:
  1452 ;;		_dc_motor_initialize
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           	psect	text12
  1457  00FB60                     __ptext12:
  1458                           	callstack 0
  1459  00FB60                     _relay_initialize:
  1460                           	callstack 28
  1461  00FB60                     
  1462                           ;ecu/relay/ecu_relay.c: 21:     if ( (((void*)0) == relay ) || ( relay ->port_name > 5U 
      +                          -1 )
  1463  00FB60  5034               	movf	relay_initialize@relay^0,w,c
  1464  00FB62  1035               	iorwf	(relay_initialize@relay+1)^0,w,c
  1465  00FB64  B4D8               	btfsc	status,2,c
  1466  00FB66  EFB7  F07D         	goto	u841
  1467  00FB6A  EFB9  F07D         	goto	u840
  1468  00FB6E                     u841:
  1469  00FB6E  EFFB  F07D         	goto	l88
  1470  00FB72                     u840:
  1471  00FB72  C034  FFD9         	movff	relay_initialize@relay,fsr2l
  1472  00FB76  C035  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1473  00FB7A  50DF               	movf	indf2,w,c
  1474  00FB7C  0B0F               	andlw	15
  1475  00FB7E  6E36               	movwf	??_relay_initialize^0,c
  1476  00FB80  0E05               	movlw	5
  1477  00FB82  6036               	cpfslt	??_relay_initialize^0,c
  1478  00FB84  EFC6  F07D         	goto	u851
  1479  00FB88  EFC8  F07D         	goto	u850
  1480  00FB8C                     u851:
  1481  00FB8C  EFFB  F07D         	goto	l88
  1482  00FB90                     u850:
  1483  00FB90  C034  FFD9         	movff	relay_initialize@relay,fsr2l
  1484  00FB94  C035  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1485  00FB98  38DF               	swapf	indf2,w,c
  1486  00FB9A  0B07               	andlw	7
  1487  00FB9C  6E36               	movwf	??_relay_initialize^0,c
  1488  00FB9E  0E07               	movlw	7
  1489  00FBA0  6436               	cpfsgt	??_relay_initialize^0,c
  1490  00FBA2  EFD5  F07D         	goto	u861
  1491  00FBA6  EFD7  F07D         	goto	u860
  1492  00FBAA                     u861:
  1493  00FBAA  EFD9  F07D         	goto	l1553
  1494  00FBAE                     u860:
  1495  00FBAE  EFFB  F07D         	goto	l88
  1496  00FBB2                     l1553:
  1497                           
  1498                           ;ecu/relay/ecu_relay.c: 27:         gpio_pin_direction_initialize(relay->port_name , rel
      +                          ay->pin , DIRECTION_OUTPUT);
  1499  00FBB2  C034  FFD9         	movff	relay_initialize@relay,fsr2l
  1500  00FBB6  C035  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1501  00FBBA  38DF               	swapf	indf2,w,c
  1502  00FBBC  0B07               	andlw	7
  1503  00FBBE  6E2B               	movwf	gpio_pin_direction_initialize@pin^0,c
  1504  00FBC0  0E00               	movlw	0
  1505  00FBC2  6E2C               	movwf	gpio_pin_direction_initialize@direction^0,c
  1506  00FBC4  C034  FFD9         	movff	relay_initialize@relay,fsr2l
  1507  00FBC8  C035  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1508  00FBCC  50DF               	movf	indf2,w,c
  1509  00FBCE  0B0F               	andlw	15
  1510  00FBD0  EC4A  F07E         	call	_gpio_pin_direction_initialize
  1511                           
  1512                           ;ecu/relay/ecu_relay.c: 28:         gpio_pin_write_value(relay->port_name , relay->pin ,
      +                           LOW );
  1513  00FBD4  C034  FFD9         	movff	relay_initialize@relay,fsr2l
  1514  00FBD8  C035  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1515  00FBDC  38DF               	swapf	indf2,w,c
  1516  00FBDE  0B07               	andlw	7
  1517  00FBE0  6E2B               	movwf	gpio_pin_write_value@pin^0,c
  1518  00FBE2  0E00               	movlw	0
  1519  00FBE4  6E2C               	movwf	gpio_pin_write_value@logic^0,c
  1520  00FBE6  C034  FFD9         	movff	relay_initialize@relay,fsr2l
  1521  00FBEA  C035  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1522  00FBEE  50DF               	movf	indf2,w,c
  1523  00FBF0  0B0F               	andlw	15
  1524  00FBF2  ECAE  F07E         	call	_gpio_pin_write_value
  1525  00FBF6                     l88:
  1526  00FBF6  0012               	return		;funcret
  1527  00FBF8                     __end_of_relay_initialize:
  1528                           	callstack 0
  1529                           
  1530 ;; *************** function _gpio_pin_write_value *****************
  1531 ;; Defined at:
  1532 ;;		line 105 in file "mcal/gpio/mcal_gpio.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;  port            1    wreg     enum E2858
  1535 ;;  pin             1    0[COMRAM] enum E2848
  1536 ;;  logic           1    1[COMRAM] enum E2840
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  port            1    8[COMRAM] enum E2858
  1539 ;;  ret             1    0        enum E329
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      enum E329
  1542 ;; Registers used:
  1543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1549 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1553 ;;Total ram usage:        9 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; This function calls:
  1556 ;;		Nothing
  1557 ;; This function is called by:
  1558 ;;		_relay_initialize
  1559 ;;		_relay_turn_on
  1560 ;;		_relay_turn_off
  1561 ;;		_led_initalize
  1562 ;;		_led_turn_on
  1563 ;;		_led_turn_off
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text13
  1568  00FD5C                     __ptext13:
  1569                           	callstack 0
  1570  00FD5C                     _gpio_pin_write_value:
  1571                           	callstack 27
  1572                           
  1573                           ;incstack = 0
  1574                           ;gpio_pin_write_value@port stored from wreg
  1575  00FD5C  6E33               	movwf	gpio_pin_write_value@port^0,c
  1576  00FD5E                     
  1577                           ;mcal/gpio/mcal_gpio.c: 108:     if ( pin > 8U -1 || pin < 0 ){
  1578  00FD5E  0E08               	movlw	8
  1579  00FD60  602B               	cpfslt	gpio_pin_write_value@pin^0,c
  1580  00FD62  EFB5  F07E         	goto	u691
  1581  00FD66  EFB7  F07E         	goto	u690
  1582  00FD6A                     u691:
  1583  00FD6A  EF11  F07F         	goto	l169
  1584  00FD6E                     u690:
  1585  00FD6E  EFFC  F07E         	goto	l1467
  1586  00FD72                     l1457:
  1587                           
  1588                           ;mcal/gpio/mcal_gpio.c: 115:                 (*lat_register[port] &= ~(1U << pin));
  1589  00FD72  C02B  F02D         	movff	gpio_pin_write_value@pin,??_gpio_pin_write_value
  1590  00FD76  0E01               	movlw	1
  1591  00FD78  6E2E               	movwf	(??_gpio_pin_write_value+1)^0,c
  1592  00FD7A  2A2D               	incf	??_gpio_pin_write_value^0,f,c
  1593  00FD7C  EFC2  F07E         	goto	u704
  1594  00FD80                     u705:
  1595  00FD80  90D8               	bcf	status,0,c
  1596  00FD82  362E               	rlcf	(??_gpio_pin_write_value+1)^0,f,c
  1597  00FD84                     u704:
  1598  00FD84  2E2D               	decfsz	??_gpio_pin_write_value^0,f,c
  1599  00FD86  EFC0  F07E         	goto	u705
  1600  00FD8A  502E               	movf	(??_gpio_pin_write_value+1)^0,w,c
  1601  00FD8C  0AFF               	xorlw	255
  1602  00FD8E  6E2F               	movwf	(??_gpio_pin_write_value+2)^0,c
  1603  00FD90  5033               	movf	gpio_pin_write_value@port^0,w,c
  1604  00FD92  0D02               	mullw	2
  1605  00FD94  0E0B               	movlw	low _lat_register
  1606  00FD96  24F3               	addwf	243,w,c
  1607  00FD98  6ED9               	movwf	fsr2l,c
  1608  00FD9A  0E00               	movlw	high _lat_register
  1609  00FD9C  20F4               	addwfc	prodh,w,c
  1610  00FD9E  6EDA               	movwf	fsr2h,c
  1611  00FDA0  CFDE F030          	movff	postinc2,??_gpio_pin_write_value+3
  1612  00FDA4  CFDD F031          	movff	postdec2,??_gpio_pin_write_value+4
  1613  00FDA8  C030  FFD9         	movff	??_gpio_pin_write_value+3,fsr2l
  1614  00FDAC  C031  FFDA         	movff	??_gpio_pin_write_value+4,fsr2h
  1615  00FDB0  502F               	movf	(??_gpio_pin_write_value+2)^0,w,c
  1616  00FDB2  16DF               	andwf	indf2,f,c
  1617  00FDB4                     
  1618                           ;mcal/gpio/mcal_gpio.c: 117:                 break;
  1619  00FDB4  EF11  F07F         	goto	l169
  1620  00FDB8                     l1461:
  1621                           
  1622                           ;mcal/gpio/mcal_gpio.c: 121:                 (*lat_register[port] |= (1U << pin)); break
      +                          ;
  1623  00FDB8  C02B  F02D         	movff	gpio_pin_write_value@pin,??_gpio_pin_write_value
  1624  00FDBC  0E01               	movlw	1
  1625  00FDBE  6E2E               	movwf	(??_gpio_pin_write_value+1)^0,c
  1626  00FDC0  2A2D               	incf	??_gpio_pin_write_value^0,f,c
  1627  00FDC2  EFE5  F07E         	goto	u714
  1628  00FDC6                     u715:
  1629  00FDC6  90D8               	bcf	status,0,c
  1630  00FDC8  362E               	rlcf	(??_gpio_pin_write_value+1)^0,f,c
  1631  00FDCA                     u714:
  1632  00FDCA  2E2D               	decfsz	??_gpio_pin_write_value^0,f,c
  1633  00FDCC  EFE3  F07E         	goto	u715
  1634  00FDD0  5033               	movf	gpio_pin_write_value@port^0,w,c
  1635  00FDD2  0D02               	mullw	2
  1636  00FDD4  0E0B               	movlw	low _lat_register
  1637  00FDD6  24F3               	addwf	243,w,c
  1638  00FDD8  6ED9               	movwf	fsr2l,c
  1639  00FDDA  0E00               	movlw	high _lat_register
  1640  00FDDC  20F4               	addwfc	prodh,w,c
  1641  00FDDE  6EDA               	movwf	fsr2h,c
  1642  00FDE0  CFDE F02F          	movff	postinc2,??_gpio_pin_write_value+2
  1643  00FDE4  CFDD F030          	movff	postdec2,??_gpio_pin_write_value+3
  1644  00FDE8  C02F  FFD9         	movff	??_gpio_pin_write_value+2,fsr2l
  1645  00FDEC  C030  FFDA         	movff	??_gpio_pin_write_value+3,fsr2h
  1646  00FDF0  502E               	movf	(??_gpio_pin_write_value+1)^0,w,c
  1647  00FDF2  12DF               	iorwf	indf2,f,c
  1648  00FDF4  EF11  F07F         	goto	l169
  1649  00FDF8                     l1467:
  1650  00FDF8  502C               	movf	gpio_pin_write_value@logic^0,w,c
  1651  00FDFA  6E2D               	movwf	??_gpio_pin_write_value^0,c
  1652  00FDFC  6A2E               	clrf	(??_gpio_pin_write_value+1)^0,c
  1653                           
  1654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1655                           ; Switch size 1, requested type "simple"
  1656                           ; Number of cases is 1, Range of values is 0 to 0
  1657                           ; switch strategies available:
  1658                           ; Name         Instructions Cycles
  1659                           ; simple_byte            4     3 (average)
  1660                           ;	Chosen strategy is simple_byte
  1661  00FDFE  502E               	movf	(??_gpio_pin_write_value+1)^0,w,c
  1662  00FE00  0A00               	xorlw	0	; case 0
  1663  00FE02  B4D8               	btfsc	status,2,c
  1664  00FE04  EF06  F07F         	goto	l1763
  1665  00FE08  EF11  F07F         	goto	l169
  1666  00FE0C                     l1763:
  1667                           
  1668                           ; Switch size 1, requested type "simple"
  1669                           ; Number of cases is 2, Range of values is 0 to 1
  1670                           ; switch strategies available:
  1671                           ; Name         Instructions Cycles
  1672                           ; simple_byte            7     4 (average)
  1673                           ;	Chosen strategy is simple_byte
  1674  00FE0C  502D               	movf	??_gpio_pin_write_value^0,w,c
  1675  00FE0E  0A00               	xorlw	0	; case 0
  1676  00FE10  B4D8               	btfsc	status,2,c
  1677  00FE12  EFB9  F07E         	goto	l1457
  1678  00FE16  0A01               	xorlw	1	; case 1
  1679  00FE18  B4D8               	btfsc	status,2,c
  1680  00FE1A  EFDC  F07E         	goto	l1461
  1681  00FE1E  EF11  F07F         	goto	l169
  1682  00FE22                     l169:
  1683  00FE22  0012               	return		;funcret
  1684  00FE24                     __end_of_gpio_pin_write_value:
  1685                           	callstack 0
  1686                           
  1687 ;; *************** function _button_initialize *****************
  1688 ;; Defined at:
  1689 ;;		line 17 in file "ecu/button/ecu_button.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  btn             2    9[COMRAM] PTR struct .
  1692 ;;		 -> btn_left(1), btn_right(1), btn_backward(1), btn_forward(1), 
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;  ret             1    0        enum E329
  1695 ;; Return value:  Size  Location     Type
  1696 ;;                  1    wreg      enum E329
  1697 ;; Registers used:
  1698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1699 ;; Tracked objects:
  1700 ;;		On entry : 0/0
  1701 ;;		On exit  : 0/0
  1702 ;;		Unchanged: 0/0
  1703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1704 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1705 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1706 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1707 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1708 ;;Total ram usage:        4 bytes
  1709 ;; Hardware stack levels used:    1
  1710 ;; Hardware stack levels required when called:    1
  1711 ;; This function calls:
  1712 ;;		_gpio_pin_direction_initialize
  1713 ;; This function is called by:
  1714 ;;		_main
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text14
  1719  00F9EA                     __ptext14:
  1720                           	callstack 0
  1721  00F9EA                     _button_initialize:
  1722                           	callstack 29
  1723  00F9EA                     
  1724                           ;ecu/button/ecu_button.c: 19:     if((((void*)0) == btn) || (btn->port_name > 5U -1) ||
  1725  00F9EA  5034               	movf	button_initialize@btn^0,w,c
  1726  00F9EC  1035               	iorwf	(button_initialize@btn+1)^0,w,c
  1727  00F9EE  B4D8               	btfsc	status,2,c
  1728  00F9F0  EFFC  F07C         	goto	u901
  1729  00F9F4  EFFE  F07C         	goto	u900
  1730  00F9F8                     u901:
  1731  00F9F8  EF2F  F07D         	goto	l10
  1732  00F9FC                     u900:
  1733  00F9FC  C034  FFD9         	movff	button_initialize@btn,fsr2l
  1734  00FA00  C035  FFDA         	movff	button_initialize@btn+1,fsr2h
  1735  00FA04  50DF               	movf	indf2,w,c
  1736  00FA06  0B0F               	andlw	15
  1737  00FA08  6E36               	movwf	??_button_initialize^0,c
  1738  00FA0A  0E05               	movlw	5
  1739  00FA0C  6036               	cpfslt	??_button_initialize^0,c
  1740  00FA0E  EF0B  F07D         	goto	u911
  1741  00FA12  EF0D  F07D         	goto	u910
  1742  00FA16                     u911:
  1743  00FA16  EF2F  F07D         	goto	l10
  1744  00FA1A                     u910:
  1745  00FA1A  C034  FFD9         	movff	button_initialize@btn,fsr2l
  1746  00FA1E  C035  FFDA         	movff	button_initialize@btn+1,fsr2h
  1747  00FA22  38DF               	swapf	indf2,w,c
  1748  00FA24  0B07               	andlw	7
  1749  00FA26  6E36               	movwf	??_button_initialize^0,c
  1750  00FA28  0E07               	movlw	7
  1751  00FA2A  6436               	cpfsgt	??_button_initialize^0,c
  1752  00FA2C  EF1A  F07D         	goto	u921
  1753  00FA30  EF1C  F07D         	goto	u920
  1754  00FA34                     u921:
  1755  00FA34  EF1E  F07D         	goto	l1611
  1756  00FA38                     u920:
  1757  00FA38  EF2F  F07D         	goto	l10
  1758  00FA3C                     l1611:
  1759                           
  1760                           ;ecu/button/ecu_button.c: 24:         gpio_pin_direction_initialize(btn->port_name, btn-
      +                          >pin, DIRECTION_INPUT);
  1761  00FA3C  C034  FFD9         	movff	button_initialize@btn,fsr2l
  1762  00FA40  C035  FFDA         	movff	button_initialize@btn+1,fsr2h
  1763  00FA44  38DF               	swapf	indf2,w,c
  1764  00FA46  0B07               	andlw	7
  1765  00FA48  6E2B               	movwf	gpio_pin_direction_initialize@pin^0,c
  1766  00FA4A  0E01               	movlw	1
  1767  00FA4C  6E2C               	movwf	gpio_pin_direction_initialize@direction^0,c
  1768  00FA4E  C034  FFD9         	movff	button_initialize@btn,fsr2l
  1769  00FA52  C035  FFDA         	movff	button_initialize@btn+1,fsr2h
  1770  00FA56  50DF               	movf	indf2,w,c
  1771  00FA58  0B0F               	andlw	15
  1772  00FA5A  EC4A  F07E         	call	_gpio_pin_direction_initialize
  1773  00FA5E                     l10:
  1774  00FA5E  0012               	return		;funcret
  1775  00FA60                     __end_of_button_initialize:
  1776                           	callstack 0
  1777                           
  1778 ;; *************** function _gpio_pin_direction_initialize *****************
  1779 ;; Defined at:
  1780 ;;		line 48 in file "mcal/gpio/mcal_gpio.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  port            1    wreg     enum E2858
  1783 ;;  pin             1    0[COMRAM] enum E2848
  1784 ;;  direction       1    1[COMRAM] enum E2844
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  port            1    8[COMRAM] enum E2858
  1787 ;;  ret             1    0        enum E329
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      enum E329
  1790 ;; Registers used:
  1791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1797 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;Total ram usage:        9 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; This function calls:
  1804 ;;		Nothing
  1805 ;; This function is called by:
  1806 ;;		_button_initialize
  1807 ;;		_relay_initialize
  1808 ;;		_led_initalize
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text15
  1813  00FC94                     __ptext15:
  1814                           	callstack 0
  1815  00FC94                     _gpio_pin_direction_initialize:
  1816                           	callstack 28
  1817                           
  1818                           ;incstack = 0
  1819                           ;gpio_pin_direction_initialize@port stored from wreg
  1820  00FC94  6E33               	movwf	gpio_pin_direction_initialize@port^0,c
  1821  00FC96                     
  1822                           ;mcal/gpio/mcal_gpio.c: 52:     if(pin > 8U -1 || pin < 0){
  1823  00FC96  0E08               	movlw	8
  1824  00FC98  602B               	cpfslt	gpio_pin_direction_initialize@pin^0,c
  1825  00FC9A  EF51  F07E         	goto	u721
  1826  00FC9E  EF53  F07E         	goto	u720
  1827  00FCA2                     u721:
  1828  00FCA2  EFAD  F07E         	goto	l150
  1829  00FCA6                     u720:
  1830  00FCA6  EF98  F07E         	goto	l1487
  1831  00FCAA                     l1481:
  1832                           
  1833                           ;mcal/gpio/mcal_gpio.c: 60:                 (*tris_register[port] &= ~(1U << pin)); brea
      +                          k;
  1834  00FCAA  C02B  F02D         	movff	gpio_pin_direction_initialize@pin,??_gpio_pin_direction_initialize
  1835  00FCAE  0E01               	movlw	1
  1836  00FCB0  6E2E               	movwf	(??_gpio_pin_direction_initialize+1)^0,c
  1837  00FCB2  2A2D               	incf	??_gpio_pin_direction_initialize^0,f,c
  1838  00FCB4  EF5E  F07E         	goto	u734
  1839  00FCB8                     u735:
  1840  00FCB8  90D8               	bcf	status,0,c
  1841  00FCBA  362E               	rlcf	(??_gpio_pin_direction_initialize+1)^0,f,c
  1842  00FCBC                     u734:
  1843  00FCBC  2E2D               	decfsz	??_gpio_pin_direction_initialize^0,f,c
  1844  00FCBE  EF5C  F07E         	goto	u735
  1845  00FCC2  502E               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  1846  00FCC4  0AFF               	xorlw	255
  1847  00FCC6  6E2F               	movwf	(??_gpio_pin_direction_initialize+2)^0,c
  1848  00FCC8  5033               	movf	gpio_pin_direction_initialize@port^0,w,c
  1849  00FCCA  0D02               	mullw	2
  1850  00FCCC  0E15               	movlw	low _tris_register
  1851  00FCCE  24F3               	addwf	243,w,c
  1852  00FCD0  6ED9               	movwf	fsr2l,c
  1853  00FCD2  0E00               	movlw	high _tris_register
  1854  00FCD4  20F4               	addwfc	prodh,w,c
  1855  00FCD6  6EDA               	movwf	fsr2h,c
  1856  00FCD8  CFDE F030          	movff	postinc2,??_gpio_pin_direction_initialize+3
  1857  00FCDC  CFDD F031          	movff	postdec2,??_gpio_pin_direction_initialize+4
  1858  00FCE0  C030  FFD9         	movff	??_gpio_pin_direction_initialize+3,fsr2l
  1859  00FCE4  C031  FFDA         	movff	??_gpio_pin_direction_initialize+4,fsr2h
  1860  00FCE8  502F               	movf	(??_gpio_pin_direction_initialize+2)^0,w,c
  1861  00FCEA  16DF               	andwf	indf2,f,c
  1862  00FCEC  EFAD  F07E         	goto	l150
  1863  00FCF0                     l1483:
  1864                           
  1865                           ;mcal/gpio/mcal_gpio.c: 65:                 (*tris_register[port] |= (1U << pin)); break
      +                          ;
  1866  00FCF0  C02B  F02D         	movff	gpio_pin_direction_initialize@pin,??_gpio_pin_direction_initialize
  1867  00FCF4  0E01               	movlw	1
  1868  00FCF6  6E2E               	movwf	(??_gpio_pin_direction_initialize+1)^0,c
  1869  00FCF8  2A2D               	incf	??_gpio_pin_direction_initialize^0,f,c
  1870  00FCFA  EF81  F07E         	goto	u744
  1871  00FCFE                     u745:
  1872  00FCFE  90D8               	bcf	status,0,c
  1873  00FD00  362E               	rlcf	(??_gpio_pin_direction_initialize+1)^0,f,c
  1874  00FD02                     u744:
  1875  00FD02  2E2D               	decfsz	??_gpio_pin_direction_initialize^0,f,c
  1876  00FD04  EF7F  F07E         	goto	u745
  1877  00FD08  5033               	movf	gpio_pin_direction_initialize@port^0,w,c
  1878  00FD0A  0D02               	mullw	2
  1879  00FD0C  0E15               	movlw	low _tris_register
  1880  00FD0E  24F3               	addwf	243,w,c
  1881  00FD10  6ED9               	movwf	fsr2l,c
  1882  00FD12  0E00               	movlw	high _tris_register
  1883  00FD14  20F4               	addwfc	prodh,w,c
  1884  00FD16  6EDA               	movwf	fsr2h,c
  1885  00FD18  CFDE F02F          	movff	postinc2,??_gpio_pin_direction_initialize+2
  1886  00FD1C  CFDD F030          	movff	postdec2,??_gpio_pin_direction_initialize+3
  1887  00FD20  C02F  FFD9         	movff	??_gpio_pin_direction_initialize+2,fsr2l
  1888  00FD24  C030  FFDA         	movff	??_gpio_pin_direction_initialize+3,fsr2h
  1889  00FD28  502E               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  1890  00FD2A  12DF               	iorwf	indf2,f,c
  1891  00FD2C  EFAD  F07E         	goto	l150
  1892  00FD30                     l1487:
  1893  00FD30  502C               	movf	gpio_pin_direction_initialize@direction^0,w,c
  1894  00FD32  6E2D               	movwf	??_gpio_pin_direction_initialize^0,c
  1895  00FD34  6A2E               	clrf	(??_gpio_pin_direction_initialize+1)^0,c
  1896                           
  1897                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1898                           ; Switch size 1, requested type "simple"
  1899                           ; Number of cases is 1, Range of values is 0 to 0
  1900                           ; switch strategies available:
  1901                           ; Name         Instructions Cycles
  1902                           ; simple_byte            4     3 (average)
  1903                           ;	Chosen strategy is simple_byte
  1904  00FD36  502E               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  1905  00FD38  0A00               	xorlw	0	; case 0
  1906  00FD3A  B4D8               	btfsc	status,2,c
  1907  00FD3C  EFA2  F07E         	goto	l1765
  1908  00FD40  EFAD  F07E         	goto	l150
  1909  00FD44                     l1765:
  1910                           
  1911                           ; Switch size 1, requested type "simple"
  1912                           ; Number of cases is 2, Range of values is 0 to 1
  1913                           ; switch strategies available:
  1914                           ; Name         Instructions Cycles
  1915                           ; simple_byte            7     4 (average)
  1916                           ;	Chosen strategy is simple_byte
  1917  00FD44  502D               	movf	??_gpio_pin_direction_initialize^0,w,c
  1918  00FD46  0A00               	xorlw	0	; case 0
  1919  00FD48  B4D8               	btfsc	status,2,c
  1920  00FD4A  EF55  F07E         	goto	l1481
  1921  00FD4E  0A01               	xorlw	1	; case 1
  1922  00FD50  B4D8               	btfsc	status,2,c
  1923  00FD52  EF78  F07E         	goto	l1483
  1924  00FD56  EFAD  F07E         	goto	l150
  1925  00FD5A                     l150:
  1926  00FD5A  0012               	return		;funcret
  1927  00FD5C                     __end_of_gpio_pin_direction_initialize:
  1928                           	callstack 0
  1929                           
  1930 ;; *************** function _button_get_status *****************
  1931 ;; Defined at:
  1932 ;;		line 35 in file "ecu/button/ecu_button.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  btn             2    9[COMRAM] PTR struct .
  1935 ;;		 -> btn_left(1), btn_right(1), btn_backward(1), btn_forward(1), 
  1936 ;;  btn_status      2   11[COMRAM] PTR enum E2900
  1937 ;;		 -> btn_left_status(1), btn_right_status(1), btn_backward_status(1), btn_forward_status(1), 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  ret             1    0        enum E329
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      enum E329
  1942 ;; Registers used:
  1943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1949 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;Total ram usage:        6 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    1
  1956 ;; This function calls:
  1957 ;;		_gpio_pin_read_value
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text16
  1964  00FBF8                     __ptext16:
  1965                           	callstack 0
  1966  00FBF8                     _button_get_status:
  1967                           	callstack 29
  1968  00FBF8                     
  1969                           ;ecu/button/ecu_button.c: 37:     if((((void*)0) == btn) || (btn->port_name > 5U -1) ||
  1970  00FBF8  5034               	movf	button_get_status@btn^0,w,c
  1971  00FBFA  1035               	iorwf	(button_get_status@btn+1)^0,w,c
  1972  00FBFC  B4D8               	btfsc	status,2,c
  1973  00FBFE  EF03  F07E         	goto	u931
  1974  00FC02  EF05  F07E         	goto	u930
  1975  00FC06                     u931:
  1976  00FC06  EF49  F07E         	goto	l17
  1977  00FC0A                     u930:
  1978  00FC0A  C034  FFD9         	movff	button_get_status@btn,fsr2l
  1979  00FC0E  C035  FFDA         	movff	button_get_status@btn+1,fsr2h
  1980  00FC12  50DF               	movf	indf2,w,c
  1981  00FC14  0B0F               	andlw	15
  1982  00FC16  6E38               	movwf	??_button_get_status^0,c
  1983  00FC18  0E05               	movlw	5
  1984  00FC1A  6038               	cpfslt	??_button_get_status^0,c
  1985  00FC1C  EF12  F07E         	goto	u941
  1986  00FC20  EF14  F07E         	goto	u940
  1987  00FC24                     u941:
  1988  00FC24  EF49  F07E         	goto	l17
  1989  00FC28                     u940:
  1990  00FC28  C034  FFD9         	movff	button_get_status@btn,fsr2l
  1991  00FC2C  C035  FFDA         	movff	button_get_status@btn+1,fsr2h
  1992  00FC30  38DF               	swapf	indf2,w,c
  1993  00FC32  0B07               	andlw	7
  1994  00FC34  6E38               	movwf	??_button_get_status^0,c
  1995  00FC36  0E07               	movlw	7
  1996  00FC38  6438               	cpfsgt	??_button_get_status^0,c
  1997  00FC3A  EF21  F07E         	goto	u951
  1998  00FC3E  EF23  F07E         	goto	u950
  1999  00FC42                     u951:
  2000  00FC42  EF25  F07E         	goto	l1627
  2001  00FC46                     u950:
  2002  00FC46  EF49  F07E         	goto	l17
  2003  00FC4A                     l1627:
  2004                           
  2005                           ;ecu/button/ecu_button.c: 42:         gpio_pin_read_value(btn->port_name, btn->pin, btn_
      +                          status);
  2006  00FC4A  C034  FFD9         	movff	button_get_status@btn,fsr2l
  2007  00FC4E  C035  FFDA         	movff	button_get_status@btn+1,fsr2h
  2008  00FC52  38DF               	swapf	indf2,w,c
  2009  00FC54  0B07               	andlw	7
  2010  00FC56  6E2B               	movwf	gpio_pin_read_value@pin^0,c
  2011  00FC58  C036  F02C         	movff	button_get_status@btn_status,gpio_pin_read_value@logic
  2012  00FC5C  C037  F02D         	movff	button_get_status@btn_status+1,gpio_pin_read_value@logic+1
  2013  00FC60  C034  FFD9         	movff	button_get_status@btn,fsr2l
  2014  00FC64  C035  FFDA         	movff	button_get_status@btn+1,fsr2h
  2015  00FC68  50DF               	movf	indf2,w,c
  2016  00FC6A  0B0F               	andlw	15
  2017  00FC6C  ECBD  F07C         	call	_gpio_pin_read_value
  2018  00FC70                     
  2019                           ;ecu/button/ecu_button.c: 43:         btn->button_status = *btn_status;
  2020  00FC70  C036  FFD9         	movff	button_get_status@btn_status,fsr2l
  2021  00FC74  C037  FFDA         	movff	button_get_status@btn_status+1,fsr2h
  2022  00FC78  50DF               	movf	indf2,w,c
  2023  00FC7A  6E38               	movwf	??_button_get_status^0,c
  2024  00FC7C  C034  FFD9         	movff	button_get_status@btn,fsr2l
  2025  00FC80  C035  FFDA         	movff	button_get_status@btn+1,fsr2h
  2026  00FC84  3238               	rrcf	??_button_get_status^0,f,c
  2027  00FC86  3238               	rrcf	??_button_get_status^0,f,c
  2028  00FC88  50DF               	movf	indf2,w,c
  2029  00FC8A  1838               	xorwf	??_button_get_status^0,w,c
  2030  00FC8C  0B7F               	andlw	-129
  2031  00FC8E  1838               	xorwf	??_button_get_status^0,w,c
  2032  00FC90  6EDF               	movwf	indf2,c
  2033  00FC92                     l17:
  2034  00FC92  0012               	return		;funcret
  2035  00FC94                     __end_of_button_get_status:
  2036                           	callstack 0
  2037                           
  2038 ;; *************** function _gpio_pin_read_value *****************
  2039 ;; Defined at:
  2040 ;;		line 137 in file "mcal/gpio/mcal_gpio.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  port            1    wreg     enum E2858
  2043 ;;  pin             1    0[COMRAM] enum E2848
  2044 ;;  logic           2    1[COMRAM] PTR enum E2840
  2045 ;;		 -> btn_left_status(1), btn_right_status(1), btn_backward_status(1), btn_forward_status(1), 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;  port            1    8[COMRAM] enum E2858
  2048 ;;  ret             1    0        enum E329
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  1    wreg      enum E329
  2051 ;; Registers used:
  2052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2058 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2061 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;Total ram usage:        9 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_button_get_status
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text17
  2072  00F97A                     __ptext17:
  2073                           	callstack 0
  2074  00F97A                     _gpio_pin_read_value:
  2075                           	callstack 29
  2076                           
  2077                           ;incstack = 0
  2078                           ;gpio_pin_read_value@port stored from wreg
  2079  00F97A  6E33               	movwf	gpio_pin_read_value@port^0,c
  2080  00F97C                     
  2081                           ;mcal/gpio/mcal_gpio.c: 140:     if ( pin > 8U -1 || ((void*)0) ==logic ){
  2082  00F97C  0E08               	movlw	8
  2083  00F97E  602B               	cpfslt	gpio_pin_read_value@pin^0,c
  2084  00F980  EFC4  F07C         	goto	u811
  2085  00F984  EFC6  F07C         	goto	u810
  2086  00F988                     u811:
  2087  00F988  EFF4  F07C         	goto	l181
  2088  00F98C                     u810:
  2089  00F98C  502C               	movf	gpio_pin_read_value@logic^0,w,c
  2090  00F98E  102D               	iorwf	(gpio_pin_read_value@logic+1)^0,w,c
  2091  00F990  A4D8               	btfss	status,2,c
  2092  00F992  EFCD  F07C         	goto	u821
  2093  00F996  EFCF  F07C         	goto	u820
  2094  00F99A                     u821:
  2095  00F99A  EFD1  F07C         	goto	l1537
  2096  00F99E                     u820:
  2097  00F99E  EFF4  F07C         	goto	l181
  2098  00F9A2                     l1537:
  2099                           
  2100                           ;mcal/gpio/mcal_gpio.c: 144:           *logic = ((*port_register[port] >> pin) & 1U);
  2101  00F9A2  C02B  F02E         	movff	gpio_pin_read_value@pin,??_gpio_pin_read_value
  2102  00F9A6  5033               	movf	gpio_pin_read_value@port^0,w,c
  2103  00F9A8  0D02               	mullw	2
  2104  00F9AA  0E01               	movlw	low _port_register
  2105  00F9AC  24F3               	addwf	243,w,c
  2106  00F9AE  6ED9               	movwf	fsr2l,c
  2107  00F9B0  0E00               	movlw	high _port_register
  2108  00F9B2  20F4               	addwfc	prodh,w,c
  2109  00F9B4  6EDA               	movwf	fsr2h,c
  2110  00F9B6  CFDE F02F          	movff	postinc2,??_gpio_pin_read_value+1
  2111  00F9BA  CFDD F030          	movff	postdec2,??_gpio_pin_read_value+2
  2112  00F9BE  C02F  FFD9         	movff	??_gpio_pin_read_value+1,fsr2l
  2113  00F9C2  C030  FFDA         	movff	??_gpio_pin_read_value+2,fsr2h
  2114  00F9C6  50DF               	movf	indf2,w,c
  2115  00F9C8  6E31               	movwf	(??_gpio_pin_read_value+3)^0,c
  2116  00F9CA  2A2E               	incf	??_gpio_pin_read_value^0,f,c
  2117  00F9CC  EFEA  F07C         	goto	u834
  2118  00F9D0                     u835:
  2119  00F9D0  90D8               	bcf	status,0,c
  2120  00F9D2  3231               	rrcf	(??_gpio_pin_read_value+3)^0,f,c
  2121  00F9D4                     u834:
  2122  00F9D4  2E2E               	decfsz	??_gpio_pin_read_value^0,f,c
  2123  00F9D6  EFE8  F07C         	goto	u835
  2124  00F9DA  5031               	movf	(??_gpio_pin_read_value+3)^0,w,c
  2125  00F9DC  0B01               	andlw	1
  2126  00F9DE  C02C  FFD9         	movff	gpio_pin_read_value@logic,fsr2l
  2127  00F9E2  C02D  FFDA         	movff	gpio_pin_read_value@logic+1,fsr2h
  2128  00F9E6  6EDF               	movwf	indf2,c
  2129  00F9E8                     l181:
  2130  00F9E8  0012               	return		;funcret
  2131  00F9EA                     __end_of_gpio_pin_read_value:
  2132                           	callstack 0
  2133  0000                     
  2134                           	psect	rparam
  2135  0000                     
  2136                           	psect	idloc
  2137                           
  2138                           ;Config register IDLOC0 @ 0x200000
  2139                           ;	unspecified, using default values
  2140  200000                     	org	2097152
  2141  200000  FF                 	db	255
  2142                           
  2143                           ;Config register IDLOC1 @ 0x200001
  2144                           ;	unspecified, using default values
  2145  200001                     	org	2097153
  2146  200001  FF                 	db	255
  2147                           
  2148                           ;Config register IDLOC2 @ 0x200002
  2149                           ;	unspecified, using default values
  2150  200002                     	org	2097154
  2151  200002  FF                 	db	255
  2152                           
  2153                           ;Config register IDLOC3 @ 0x200003
  2154                           ;	unspecified, using default values
  2155  200003                     	org	2097155
  2156  200003  FF                 	db	255
  2157                           
  2158                           ;Config register IDLOC4 @ 0x200004
  2159                           ;	unspecified, using default values
  2160  200004                     	org	2097156
  2161  200004  FF                 	db	255
  2162                           
  2163                           ;Config register IDLOC5 @ 0x200005
  2164                           ;	unspecified, using default values
  2165  200005                     	org	2097157
  2166  200005  FF                 	db	255
  2167                           
  2168                           ;Config register IDLOC6 @ 0x200006
  2169                           ;	unspecified, using default values
  2170  200006                     	org	2097158
  2171  200006  FF                 	db	255
  2172                           
  2173                           ;Config register IDLOC7 @ 0x200007
  2174                           ;	unspecified, using default values
  2175  200007                     	org	2097159
  2176  200007  FF                 	db	255
  2177                           
  2178                           	psect	config
  2179                           
  2180                           ; Padding undefined space
  2181  300000                     	org	3145728
  2182  300000  FF                 	db	255
  2183                           
  2184                           ;Config register CONFIG1H @ 0x300001
  2185                           ;	Oscillator Selection bits
  2186                           ;	FOSC = RCIO6, External RC oscillator, port function on RA6
  2187                           ;	Fail-Safe Clock Monitor Enable bit
  2188                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2189                           ;	Internal/External Oscillator Switchover bit
  2190                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2191  300001                     	org	3145729
  2192  300001  07                 	db	7
  2193                           
  2194                           ;Config register CONFIG2L @ 0x300002
  2195                           ;	Power-up Timer Enable bit
  2196                           ;	PWRT = OFF, PWRT disabled
  2197                           ;	Brown-out Reset Enable bits
  2198                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2199                           ;	Brown Out Reset Voltage bits
  2200                           ;	BORV = 18, VBOR set to 1.8 V nominal
  2201  300002                     	org	3145730
  2202  300002  1F                 	db	31
  2203                           
  2204                           ;Config register CONFIG2H @ 0x300003
  2205                           ;	Watchdog Timer Enable bit
  2206                           ;	WDTEN = ON, WDT is always enabled. SWDTEN bit has no effect
  2207                           ;	Watchdog Timer Postscale Select bits
  2208                           ;	WDTPS = 32768, 1:32768
  2209  300003                     	org	3145731
  2210  300003  1F                 	db	31
  2211                           
  2212                           ; Padding undefined space
  2213  300004                     	org	3145732
  2214  300004  FF                 	db	255
  2215                           
  2216                           ;Config register CONFIG3H @ 0x300005
  2217                           ;	CCP2 MUX bit
  2218                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2219                           ;	PORTB A/D Enable bit
  2220                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  2221                           ;	Low-Power Timer1 Oscillator Enable bit
  2222                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2223                           ;	HFINTOSC Fast Start-up
  2224                           ;	HFOFST = ON, HFINTOSC starts clocking the CPU without waiting for the oscillator to st
      +                          ablize.
  2225                           ;	MCLR Pin Enable bit
  2226                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2227  300005                     	org	3145733
  2228  300005  8B                 	db	139
  2229                           
  2230                           ;Config register CONFIG4L @ 0x300006
  2231                           ;	Stack Full/Underflow Reset Enable bit
  2232                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2233                           ;	Single-Supply ICSP Enable bit
  2234                           ;	LVP = ON, Single-Supply ICSP enabled
  2235                           ;	Extended Instruction Set Enable bit
  2236                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2237                           ;	Background Debugger Enable bit
  2238                           ;	DEBUG = 0x1, unprogrammed default
  2239  300006                     	org	3145734
  2240  300006  85                 	db	133
  2241                           
  2242                           ; Padding undefined space
  2243  300007                     	org	3145735
  2244  300007  FF                 	db	255
  2245                           
  2246                           ;Config register CONFIG5L @ 0x300008
  2247                           ;	Code Protection Block 0
  2248                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2249                           ;	Code Protection Block 1
  2250                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2251                           ;	Code Protection Block 2
  2252                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2253                           ;	Code Protection Block 3
  2254                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2255  300008                     	org	3145736
  2256  300008  0F                 	db	15
  2257                           
  2258                           ;Config register CONFIG5H @ 0x300009
  2259                           ;	Boot Block Code Protection bit
  2260                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2261                           ;	Data EEPROM Code Protection bit
  2262                           ;	CPD = OFF, Data EEPROM not code-protected
  2263  300009                     	org	3145737
  2264  300009  C0                 	db	192
  2265                           
  2266                           ;Config register CONFIG6L @ 0x30000A
  2267                           ;	Write Protection Block 0
  2268                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2269                           ;	Write Protection Block 1
  2270                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2271                           ;	Write Protection Block 2
  2272                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2273                           ;	Write Protection Block 3
  2274                           ;	WRT3 = OFF, Block 3 (00C000h-00FFFFh) not write-protected
  2275  30000A                     	org	3145738
  2276  30000A  0F                 	db	15
  2277                           
  2278                           ;Config register CONFIG6H @ 0x30000B
  2279                           ;	Configuration Register Write Protection bit
  2280                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2281                           ;	Boot Block Write Protection bit
  2282                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2283                           ;	Data EEPROM Write Protection bit
  2284                           ;	WRTD = OFF, Data EEPROM not write-protected
  2285  30000B                     	org	3145739
  2286  30000B  E0                 	db	224
  2287                           
  2288                           ;Config register CONFIG7L @ 0x30000C
  2289                           ;	Table Read Protection Block 0
  2290                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2291                           ;	Table Read Protection Block 1
  2292                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2293                           ;	Table Read Protection Block 2
  2294                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2295                           ;	Table Read Protection Block 3
  2296                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2297  30000C                     	org	3145740
  2298  30000C  0F                 	db	15
  2299                           
  2300                           ;Config register CONFIG7H @ 0x30000D
  2301                           ;	Boot Block Table Read Protection bit
  2302                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2303  30000D                     	org	3145741
  2304  30000D  40                 	db	64
  2305                           tosu	equ	0xFFF
  2306                           tosh	equ	0xFFE
  2307                           tosl	equ	0xFFD
  2308                           stkptr	equ	0xFFC
  2309                           pclatu	equ	0xFFB
  2310                           pclath	equ	0xFFA
  2311                           pcl	equ	0xFF9
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           prodh	equ	0xFF4
  2317                           prodl	equ	0xFF3
  2318                           indf0	equ	0xFEF
  2319                           postinc0	equ	0xFEE
  2320                           postdec0	equ	0xFED
  2321                           preinc0	equ	0xFEC
  2322                           plusw0	equ	0xFEB
  2323                           fsr0h	equ	0xFEA
  2324                           fsr0l	equ	0xFE9
  2325                           wreg	equ	0xFE8
  2326                           indf1	equ	0xFE7
  2327                           postinc1	equ	0xFE6
  2328                           postdec1	equ	0xFE5
  2329                           preinc1	equ	0xFE4
  2330                           plusw1	equ	0xFE3
  2331                           fsr1h	equ	0xFE2
  2332                           fsr1l	equ	0xFE1
  2333                           bsr	equ	0xFE0
  2334                           indf2	equ	0xFDF
  2335                           postinc2	equ	0xFDE
  2336                           postdec2	equ	0xFDD
  2337                           preinc2	equ	0xFDC
  2338                           plusw2	equ	0xFDB
  2339                           fsr2h	equ	0xFDA
  2340                           fsr2l	equ	0xFD9
  2341                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        42
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      62
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    gpio_pin_read_value@logic	PTR enum E2840 size(2) Largest target is 1
		 -> btn_left_status(COMRAM[1]), btn_right_status(COMRAM[1]), btn_backward_status(COMRAM[1]), btn_forward_status(COMRAM[1]), 

    port_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTE(SFR[1]), PORTD(SFR[1]), PORTC(SFR[1]), PORTB(SFR[1]), 
		 -> PORTA(SFR[1]), 

    lat_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATE(SFR[1]), LATD(SFR[1]), LATC(SFR[1]), LATB(SFR[1]), 
		 -> LATA(SFR[1]), 

    tris_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISE(SFR[1]), TRISD(SFR[1]), TRISC(SFR[1]), TRISB(SFR[1]), 
		 -> TRISA(SFR[1]), 

    relay_turn_off@relay	PTR struct . size(2) Largest target is 2
		 -> dc_motor_4(COMRAM[2]), dc_motor_3(COMRAM[2]), dc_motor_2(COMRAM[2]), dc_motor_1(COMRAM[2]), 

    relay_turn_on@relay	PTR struct . size(2) Largest target is 2
		 -> dc_motor_4(COMRAM[2]), dc_motor_3(COMRAM[2]), dc_motor_2(COMRAM[2]), dc_motor_1(COMRAM[2]), 

    relay_initialize@relay	PTR struct . size(2) Largest target is 2
		 -> dc_motor_4(COMRAM[2]), dc_motor_3(COMRAM[2]), dc_motor_2(COMRAM[2]), dc_motor_1(COMRAM[2]), 

    dc_motor_stop@dc_motor	PTR struct . size(2) Largest target is 2
		 -> dc_motor_4(COMRAM[2]), dc_motor_3(COMRAM[2]), dc_motor_2(COMRAM[2]), dc_motor_1(COMRAM[2]), 

    dc_motor_rotate_left@dc_motor	PTR struct . size(2) Largest target is 2
		 -> dc_motor_4(COMRAM[2]), dc_motor_3(COMRAM[2]), dc_motor_2(COMRAM[2]), dc_motor_1(COMRAM[2]), 

    dc_motor_rotate_right@dc_motor	PTR struct . size(2) Largest target is 2
		 -> dc_motor_4(COMRAM[2]), dc_motor_3(COMRAM[2]), dc_motor_2(COMRAM[2]), dc_motor_1(COMRAM[2]), 

    dc_motor_initialize@dc_motor	PTR struct . size(2) Largest target is 2
		 -> dc_motor_4(COMRAM[2]), dc_motor_3(COMRAM[2]), dc_motor_2(COMRAM[2]), dc_motor_1(COMRAM[2]), 

    button_get_status@btn_status	PTR enum E2900 size(2) Largest target is 1
		 -> btn_left_status(COMRAM[1]), btn_right_status(COMRAM[1]), btn_backward_status(COMRAM[1]), btn_forward_status(COMRAM[1]), 

    button_get_status@btn	PTR struct . size(2) Largest target is 1
		 -> btn_left(COMRAM[1]), btn_right(COMRAM[1]), btn_backward(COMRAM[1]), btn_forward(COMRAM[1]), 

    button_initialize@btn	PTR struct . size(2) Largest target is 1
		 -> btn_left(COMRAM[1]), btn_right(COMRAM[1]), btn_backward(COMRAM[1]), btn_forward(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_dc_motor_initialize
    _robot_twist_right->_dc_motor_rotate_left
    _robot_twist_right->_dc_motor_rotate_right
    _robot_twist_left->_dc_motor_rotate_left
    _robot_twist_left->_dc_motor_rotate_right
    _robot_move_stop->_dc_motor_stop
    _dc_motor_stop->_relay_turn_off
    _robot_move_forward->_dc_motor_rotate_right
    _dc_motor_rotate_right->_relay_turn_off
    _dc_motor_rotate_right->_relay_turn_on
    _robot_move_backward->_dc_motor_rotate_left
    _dc_motor_rotate_left->_relay_turn_off
    _dc_motor_rotate_left->_relay_turn_on
    _relay_turn_on->_gpio_pin_write_value
    _relay_turn_off->_gpio_pin_write_value
    _dc_motor_initialize->_relay_initialize
    _relay_initialize->_gpio_pin_direction_initialize
    _relay_initialize->_gpio_pin_write_value
    _button_initialize->_gpio_pin_direction_initialize
    _button_get_status->_gpio_pin_read_value

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   27684
                  _button_get_status
                  _button_initialize
                _dc_motor_initialize
                _robot_move_backward
                 _robot_move_forward
                    _robot_move_stop
                   _robot_twist_left
                  _robot_twist_right
 ---------------------------------------------------------------------------------
 (1) _robot_twist_right                                    0     0      0    7108
               _dc_motor_rotate_left
              _dc_motor_rotate_right
 ---------------------------------------------------------------------------------
 (1) _robot_twist_left                                     0     0      0    7108
               _dc_motor_rotate_left
              _dc_motor_rotate_right
 ---------------------------------------------------------------------------------
 (1) _robot_move_stop                                      0     0      0    1893
                      _dc_motor_stop
 ---------------------------------------------------------------------------------
 (2) _dc_motor_stop                                        3     1      2    1893
                                             13 COMRAM     3     1      2
                     _relay_turn_off
 ---------------------------------------------------------------------------------
 (1) _robot_move_forward                                   0     0      0    3554
              _dc_motor_rotate_right
 ---------------------------------------------------------------------------------
 (2) _dc_motor_rotate_right                                3     1      2    3554
                                             13 COMRAM     3     1      2
                     _relay_turn_off
                      _relay_turn_on
 ---------------------------------------------------------------------------------
 (1) _robot_move_backward                                  0     0      0    3554
               _dc_motor_rotate_left
 ---------------------------------------------------------------------------------
 (2) _dc_motor_rotate_left                                 3     1      2    3554
                                             13 COMRAM     3     1      2
                     _relay_turn_off
                      _relay_turn_on
 ---------------------------------------------------------------------------------
 (3) _relay_turn_on                                        4     2      2    1357
                                              9 COMRAM     4     2      2
               _gpio_pin_write_value
 ---------------------------------------------------------------------------------
 (3) _relay_turn_off                                       4     2      2    1509
                                              9 COMRAM     4     2      2
               _gpio_pin_write_value
 ---------------------------------------------------------------------------------
 (1) _dc_motor_initialize                                  3     1      2    2364
                                             13 COMRAM     3     1      2
                   _relay_initialize
 ---------------------------------------------------------------------------------
 (2) _relay_initialize                                     4     2      2    1980
                                              9 COMRAM     4     2      2
      _gpio_pin_direction_initialize
               _gpio_pin_write_value
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_write_value                                 9     7      2    1059
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (1) _button_initialize                                    4     2      2    1029
                                              9 COMRAM     4     2      2
      _gpio_pin_direction_initialize
 ---------------------------------------------------------------------------------
 (3) _gpio_pin_direction_initialize                        9     7      2     601
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (1) _button_get_status                                    6     2      4    1074
                                              9 COMRAM     6     2      4
                _gpio_pin_read_value
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_read_value                                  9     6      3     276
                                              0 COMRAM     9     6      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _button_get_status
     _gpio_pin_read_value
   _button_initialize
     _gpio_pin_direction_initialize
   _dc_motor_initialize
     _relay_initialize
       _gpio_pin_direction_initialize
       _gpio_pin_write_value
   _robot_move_backward
     _dc_motor_rotate_left
       _relay_turn_off
         _gpio_pin_write_value
       _relay_turn_on
         _gpio_pin_write_value
   _robot_move_forward
     _dc_motor_rotate_right
       _relay_turn_off
         _gpio_pin_write_value
       _relay_turn_on
         _gpio_pin_write_value
   _robot_move_stop
     _dc_motor_stop
       _relay_turn_off
         _gpio_pin_write_value
   _robot_twist_left
     _dc_motor_rotate_left
       _relay_turn_off
         _gpio_pin_write_value
       _relay_turn_on
         _gpio_pin_write_value
     _dc_motor_rotate_right
       _relay_turn_off
         _gpio_pin_write_value
       _relay_turn_on
         _gpio_pin_write_value
   _robot_twist_right
     _dc_motor_rotate_left
       _relay_turn_off
         _gpio_pin_write_value
       _relay_turn_on
         _gpio_pin_write_value
     _dc_motor_rotate_right
       _relay_turn_off
         _gpio_pin_write_value
       _relay_turn_on
         _gpio_pin_write_value

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      3E       1       65.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3E      32        0.0%
DATA                 0      0      3E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Apr 03 18:11:49 2021

                     _robot_twist_right F846                                      l10 FA5E  
                                    l17 FC92                                      l33 F944  
                                    l43 F978                                      l28 F8DC  
                                    l38 F910                                      l95 FB5E  
                                    l88 FBF6                      ?_robot_twist_right 002B  
               __size_of_relay_turn_off 0080                                     l102 FADE  
                                   l150 FD5A                                     l181 F9E8  
                                   l262 F7E0                                     l271 F7AE  
                                   l169 FE22                                     l265 F876  
                                   l274 F812                                     l268 F844  
                                   l279 FE84                                     u720 FCA6  
                                   u704 FD84                                     u800 FAAE  
                                   u721 FCA2                                     u705 FD80  
                                   u801 FAAA                                     u810 F98C  
                                   u714 FDCA                                     u811 F988  
                                   u715 FDC6                                     u820 F99E  
                                   u900 F9FC                                     u821 F99A  
                                   u901 F9F8                                     u734 FCBC  
                                   u910 FA1A                                     u750 FAF2  
                                   u735 FCB8                                     u911 FA16  
                                   u751 FAEE                                     u744 FD02  
                                   u920 FA38                                     u840 FB72  
                                   u760 FB10                                     u745 FCFE  
                                   u921 FA34                                     u841 FB6E  
                                   u761 FB0C                                     u834 F9D4  
                                   u930 FC0A                                     u690 FD6E  
                                   u850 FB90                                     u770 FB2E  
                                   u835 F9D0                                     u931 FC06  
                                   u691 FD6A                                     u851 FB8C  
                                   u771 FB2A                                     u940 FC28  
                                   u860 FBAE                                     u780 FA72  
                                   u941 FC24                                     u861 FBAA  
                                   u781 FA6E                                     u950 FC46  
                                   u790 FA90                                     u870 F924  
                                   u951 FC42                                     u791 FA8C  
                                   u871 F920                                     u960 F8BC  
                                   u880 F8F0                                     u961 F8B8  
                                   u881 F8EC                                     u890 F958  
                                   u891 F954                     ??_robot_twist_right 003B  
                                   prod 000FF3             __size_of_robot_move_forward 0032  
          __size_of_robot_move_backward 0032                                    l1511 FA60  
                                  l1503 FB32                                    l1601 F9EA  
                                  l1521 FAB2                                    l1513 FA60  
                                  l1505 FB54                                    l1531 F97C  
                                  l1611 FA3C                                    l1603 F9EA  
                                  l1451 FD5E                                    l1523 FAD4  
                                  l1515 FA72                                    l1507 FB5E  
                                  l1533 F98C                                    l1621 FC0A  
                                  l1613 FA5E                                    l1605 F9FC  
                                  l1461 FDB8                                    l1525 FADE  
                                  l1517 FA90                                    l1631 FC92  
                                  l1623 FC28                                    l1607 FA1A  
                                  l1543 FB60                                    l1711 FE24  
                                  l1537 F9A2                                    l1529 F97C  
                                  l1617 FBF8                                    l1481 FCAA  
                                  l1473 FC96                                    l1457 FD72  
                                  l1449 FD5E                                    l1553 FBB2  
                                  l1545 FB60                                    l1561 F912  
                                  l1721 FF14                                    l1713 FED4  
                                  l1539 F9E8                                    l1627 FC4A  
                                  l1619 FBF8                                    l1483 FCF0  
                                  l1475 FC96                                    l1459 FDB4  
                                  l1467 FDF8                                    l1555 FBF6  
                                  l1547 FB72                                    l1643 F8C0  
                                  l1635 F8AA                                    l1651 F846  
                                  l1731 FF5C                                    l1715 FEE4  
                                  l1723 FF1C                                    l1629 FC70  
                                  l1549 FB90                                    l1645 F8DC  
                                  l1637 F8AA                                    l1493 FAE0  
                                  l1581 F8F4                                    l1573 F8DE  
                                  l1653 F814                                    l1741 FFA4  
                                  l1725 FF2C                                    l1733 FF64  
                                  l1717 FEF4                                    l1487 FD30  
                                  l1495 FAE0                                    l1583 F910  
                                  l1575 F8DE                                    l1655 F77E  
                                  l1567 F928                                    l1559 F912  
                                  l1751 FFEC                                    l1735 FF74  
                                  l1743 FFAC                                    l1727 FF3C  
                                  l1719 FF04                                    l1497 FAF2  
                                  l1569 F944                                    l1649 F7B0  
                                  l1657 F7E2                                    l1745 FFBC  
                                  l1753 FFF4                                    l1737 FF84  
                                  l1729 FF4C                                    l1763 FE0C  
                                  l1499 FB10                                    l1595 F95C  
                                  l1587 F946                                    l1747 FFCC  
                                  l1739 FF94                                    l1765 FD44  
                                  l1597 F978                                    l1589 F946  
                                  l1749 FFDC                                    u1100 FF2C  
                                  u1101 FF28                                    u1110 FF3C  
                                  u1111 FF38                                    u1200 FFDC  
                                  u1120 FF4C                                    u1201 FFD8  
                                  u1121 FF48                                    u1210 FFEC  
                                  u1130 FF5C                                    u1211 FFE8  
                                  u1131 FF58                                    u1140 FF74  
                                  u1060 FEE4                                    u1141 FF70  
                                  u1061 FEE0                                    u1150 FF84  
                                  u1070 FEF4                                    u1151 FF80  
                                  u1071 FEF0                                    u1160 FF94  
                                  u1080 FF04                                    u1161 FF90  
                                  u1081 FF00                                    u1170 FFA4  
                                  u1090 FF14                                    u1171 FFA0  
                                  u1091 FF10                                    u1180 FFBC  
                                  u1181 FFB8                                    _LATA 000F89  
                                  u1190 FFCC                                    _LATB 000F8A  
                                  u1191 FFC8                                    _LATC 000F8B  
                                  _LATD 000F8C                                    _LATE 000F8D  
                                  _main FE24                                    fsr2h 000FDA  
                                  indf2 000FDF                                    fsr1l 000FE1  
                 relay_initialize@relay 0034                                    fsr2l 000FD9  
                                  prodl 000FF3                                    start 0000  
             __end_of_robot_twist_right F878                __size_of_robot_move_stop 0032  
                          ___param_bank 000000       gpio_pin_direction_initialize@port 0033  
                  _gpio_pin_write_value FD5C                                   ?_main 002B  
                                 _PORTA 000F80                                   _PORTB 000F81  
                                 _PORTC 000F82                                   _PORTD 000F83  
                                 _PORTE 000F84                                   _TRISA 000F92  
                                 _TRISB 000F93                                   _TRISC 000F94  
                                 _TRISD 000F95                                   _TRISE 000F96  
                                 tablat 000FF5                     relay_turn_off@relay 0034  
                                 status 000FD8                       _button_get_status FBF8  
        ?_gpio_pin_direction_initialize 002B                      ?_button_get_status 0034  
                       __initialization F878                   __end_of_relay_turn_on FB60  
                          __end_of_main 0000                   ?_gpio_pin_write_value 002B  
                   ??_button_get_status 0038             __end_of_dc_motor_initialize F8DE  
                                ??_main 003B                           __activetblptr 000002  
                      _btn_right_status 003C                       _button_initialize F9EA  
          __size_of_gpio_pin_read_value 0070                      ?_button_initialize 0034  
             __end_of_button_get_status FC94           __size_of_dc_motor_rotate_left 0034  
                         _tris_register 0015                     ??_button_initialize 0036  
            __size_of_robot_twist_right 0032                       ??_robot_move_stop 003B  
                        _relay_turn_off FA60                            __pdataCOMRAM 0001  
             __end_of_button_initialize FA60                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
              __end_of_robot_twist_left F846                       ?_relay_initialize 0034  
                    ??_relay_initialize 0036                gpio_pin_read_value@logic 002C  
                            __accesstop 0060                 __end_of__initialization F8A0  
                         ___rparam_used 000001                          __pcstackCOMRAM 002B  
                ??_gpio_pin_write_value 002D                     _robot_move_backward F77E  
                  button_initialize@btn 0034                  __end_of_relay_turn_off FAE0  
                  ?_robot_move_backward 002B                   _dc_motor_rotate_right F912  
                            _dc_motor_1 0025                              _dc_motor_2 0023  
                            _dc_motor_3 0021                              _dc_motor_4 001F  
            __size_of_button_get_status 009C                         ?_relay_turn_off 0034  
            __end_of_robot_move_forward F7E2              __size_of_button_initialize 0076  
                 ??_robot_move_backward 003B                  __size_of_dc_motor_stop 0034  
                               __Hparam 0000                                 __Lparam 0000  
                   _gpio_pin_read_value F97A                                 __pcinit F878  
                               __ramtop 1000                                 __ptext0 FE24  
                               __ptext1 F846                                 __ptext2 F814  
                               __ptext3 F7E2                                 __ptext4 F946  
                               __ptext5 F7B0                                 __ptext6 F912  
                               __ptext7 F77E                                 __ptext8 F8DE  
                               __ptext9 FAE0            dc_motor_rotate_left@dc_motor 0038  
       ??_gpio_pin_direction_initialize 002D                  ?_dc_motor_rotate_right 0038  
                  ?_gpio_pin_read_value 002B                    end_of_initialization F8A0  
                         __Lmediumconst 0000                         _robot_move_stop F7E2  
                         _dc_motor_stop F946                            _btn_backward 0029  
                               postdec1 000FE5                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc2 000FDE  
          __end_of_dc_motor_rotate_left F912            __size_of_dc_motor_initialize 0034  
                 ??_gpio_pin_read_value 002E                       ?_robot_twist_left 002B  
                __size_of_relay_turn_on 0080                      ??_robot_twist_left 003B  
                        ?_dc_motor_stop 0038               __size_of_relay_initialize 0098  
gpio_pin_direction_initialize@direction 002C                           __pidataCOMRAM F754  
                    relay_turn_on@relay 0034                     start_initialization F878  
                  button_get_status@btn 0034   __end_of_gpio_pin_direction_initialize FD5C  
__size_of_gpio_pin_direction_initialize 00C8           _gpio_pin_direction_initialize FC94  
                          _lat_register 000B                 __end_of_robot_move_stop F814  
                      ??_relay_turn_off 0036                gpio_pin_write_value@port 0033  
                         _relay_turn_on FAE0           __size_of_gpio_pin_write_value 00C8  
               gpio_pin_read_value@port 0033                             __pbssCOMRAM 003B  
         dc_motor_rotate_right@dc_motor 0038                    _dc_motor_rotate_left F8DE  
                    _robot_move_forward F7B0                         ??_dc_motor_stop 003A  
                   ?_robot_move_forward 002B                          ?_relay_turn_on 0034  
           __end_of_robot_move_backward F7B0                 ??_dc_motor_rotate_right 003A  
                             _btn_right 0028                    ??_robot_move_forward 003B  
                      ?_robot_move_stop 002B                   ?_dc_motor_rotate_left 0038  
                      _relay_initialize FB60                     _dc_motor_initialize F8AA  
      gpio_pin_direction_initialize@pin 002B                             _btn_forward 002A  
                   _btn_backward_status 003D                    ?_dc_motor_initialize 0038  
                             copy_data0 F88C               gpio_pin_write_value@logic 002C  
                              __Hrparam 0000                         ??_relay_turn_on 0036  
               gpio_pin_write_value@pin 002B                                __Lrparam 0000  
             __size_of_robot_twist_left 0032                   dc_motor_stop@dc_motor 0038  
                gpio_pin_read_value@pin 002B             __end_of_gpio_pin_read_value F9EA  
                 ??_dc_motor_initialize 003A                                __ptext10 FA60  
                              __ptext11 F8AA                                __ptext12 FB60  
                              __ptext13 FD5C                                __ptext14 F9EA  
                              __ptext15 FC94                                __ptext16 FBF8  
                              __ptext17 F97A                  ??_dc_motor_rotate_left 003A  
                              _btn_left 0027                           __size_of_main 01DC  
           dc_motor_initialize@dc_motor 0038            __end_of_gpio_pin_write_value FE24  
                    _btn_forward_status 003E                         _btn_left_status 003B  
        __size_of_dc_motor_rotate_right 0034             button_get_status@btn_status 0036  
         __end_of_dc_motor_rotate_right F946                __end_of_relay_initialize FBF8  
                         _port_register 0001                   __end_of_dc_motor_stop F97A  
                      _robot_twist_left F814  
